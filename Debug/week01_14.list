
week01_14.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031ec  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003384  08003384  00013384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800339c  0800339c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800339c  0800339c  0001339c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033a4  080033a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033a4  080033a4  000133a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033a8  080033a8  000133a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  080033b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080033b8  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b22  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000162a  00000000  00000000  00029b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b00  00000000  00000000  0002b188  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a48  00000000  00000000  0002bc88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015445  00000000  00000000  0002c6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000076aa  00000000  00000000  00041b15  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000887da  00000000  00000000  000491bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d1999  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e34  00000000  00000000  000d1a14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800336c 	.word	0x0800336c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	0800336c 	.word	0x0800336c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08c      	sub	sp, #48	; 0x30
 80004dc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004de:	f000 fd23 	bl	8000f28 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004e2:	f000 f941 	bl	8000768 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e6:	f000 faeb 	bl	8000ac0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004ea:	f000 fabf 	bl	8000a6c <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80004ee:	f000 fa47 	bl	8000980 <MX_TIM2_Init>
	MX_TIM1_Init();
 80004f2:	f000 f9a3 	bl	800083c <MX_TIM1_Init>
	GPIO_PinState clk[2];               //now,last
	GPIO_PinState clk2[2];
	GPIO_PinState clk3[2];
	GPIO_PinState clk4[2];
	//uint8_t ui8TimPulse = 0;
	uint32_t x = 1;
 80004f6:	2301      	movs	r3, #1
 80004f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t y = 1;
 80004fa:	2301      	movs	r3, #1
 80004fc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t z = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t LED_HalfPeriod = 1000;           //1Hz
 8000502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000506:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t count = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	61fb      	str	r3, [r7, #28]
	uint32_t count3 = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	61bb      	str	r3, [r7, #24]
	uint32_t tbotton = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		//TIM2->CCR2 = (htim2.Init.Period * ui8TimPulse) / 100u;
		if (HAL_GetTick() - tbotton >= 100) {
 8000514:	f000 fd6e 	bl	8000ff4 <HAL_GetTick>
 8000518:	4602      	mov	r2, r0
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	1ad3      	subs	r3, r2, r3
 800051e:	2b63      	cmp	r3, #99	; 0x63
 8000520:	f240 8095 	bls.w	800064e <main+0x176>
			clk[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000524:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000528:	488c      	ldr	r0, [pc, #560]	; (800075c <main+0x284>)
 800052a:	f001 f803 	bl	8001534 <HAL_GPIO_ReadPin>
 800052e:	4603      	mov	r3, r0
 8000530:	743b      	strb	r3, [r7, #16]
			clk2[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8000532:	2108      	movs	r1, #8
 8000534:	488a      	ldr	r0, [pc, #552]	; (8000760 <main+0x288>)
 8000536:	f000 fffd 	bl	8001534 <HAL_GPIO_ReadPin>
 800053a:	4603      	mov	r3, r0
 800053c:	733b      	strb	r3, [r7, #12]
			clk3[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 800053e:	2120      	movs	r1, #32
 8000540:	4887      	ldr	r0, [pc, #540]	; (8000760 <main+0x288>)
 8000542:	f000 fff7 	bl	8001534 <HAL_GPIO_ReadPin>
 8000546:	4603      	mov	r3, r0
 8000548:	723b      	strb	r3, [r7, #8]
			//clk4[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
			if (clk2[1] == GPIO_PIN_SET && clk2[0] == GPIO_PIN_RESET) {
 800054a:	7b7b      	ldrb	r3, [r7, #13]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d114      	bne.n	800057a <main+0xa2>
 8000550:	7b3b      	ldrb	r3, [r7, #12]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d111      	bne.n	800057a <main+0xa2>
				if (x == 1) {
 8000556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000558:	2b01      	cmp	r3, #1
 800055a:	d107      	bne.n	800056c <main+0x94>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 800055c:	2200      	movs	r2, #0
 800055e:	2180      	movs	r1, #128	; 0x80
 8000560:	4880      	ldr	r0, [pc, #512]	; (8000764 <main+0x28c>)
 8000562:	f000 ffff 	bl	8001564 <HAL_GPIO_WritePin>
					x = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800056a:	e006      	b.n	800057a <main+0xa2>
				} else {
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 800056c:	2201      	movs	r2, #1
 800056e:	2180      	movs	r1, #128	; 0x80
 8000570:	487c      	ldr	r0, [pc, #496]	; (8000764 <main+0x28c>)
 8000572:	f000 fff7 	bl	8001564 <HAL_GPIO_WritePin>
					x = 1;
 8000576:	2301      	movs	r3, #1
 8000578:	62fb      	str	r3, [r7, #44]	; 0x2c
				}
			}
			if (clk3[0] == GPIO_PIN_RESET && clk3[1] == GPIO_PIN_SET) {
 800057a:	7a3b      	ldrb	r3, [r7, #8]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d10a      	bne.n	8000596 <main+0xbe>
 8000580:	7a7b      	ldrb	r3, [r7, #9]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d107      	bne.n	8000596 <main+0xbe>
				if (y == 1) {
 8000586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000588:	2b01      	cmp	r3, #1
 800058a:	d102      	bne.n	8000592 <main+0xba>

					y = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000590:	e001      	b.n	8000596 <main+0xbe>
				} else {

					y = 1;
 8000592:	2301      	movs	r3, #1
 8000594:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			if (clk4[0] == GPIO_PIN_RESET && clk4[1] == GPIO_PIN_SET) {
 8000596:	793b      	ldrb	r3, [r7, #4]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d132      	bne.n	8000602 <main+0x12a>
 800059c:	797b      	ldrb	r3, [r7, #5]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d12f      	bne.n	8000602 <main+0x12a>
				if (z == 0) {
 80005a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d106      	bne.n	80005b6 <main+0xde>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2180      	movs	r1, #128	; 0x80
 80005ac:	486b      	ldr	r0, [pc, #428]	; (800075c <main+0x284>)
 80005ae:	f000 ffd9 	bl	8001564 <HAL_GPIO_WritePin>

					z = 25;
 80005b2:	2319      	movs	r3, #25
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (z == 25) {
 80005b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b8:	2b19      	cmp	r3, #25
 80005ba:	d106      	bne.n	80005ca <main+0xf2>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80005bc:	2200      	movs	r2, #0
 80005be:	2180      	movs	r1, #128	; 0x80
 80005c0:	4866      	ldr	r0, [pc, #408]	; (800075c <main+0x284>)
 80005c2:	f000 ffcf 	bl	8001564 <HAL_GPIO_WritePin>

					z = 50;
 80005c6:	2332      	movs	r3, #50	; 0x32
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (z == 50) {
 80005ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005cc:	2b32      	cmp	r3, #50	; 0x32
 80005ce:	d106      	bne.n	80005de <main+0x106>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2180      	movs	r1, #128	; 0x80
 80005d4:	4861      	ldr	r0, [pc, #388]	; (800075c <main+0x284>)
 80005d6:	f000 ffc5 	bl	8001564 <HAL_GPIO_WritePin>

					z = 75;
 80005da:	234b      	movs	r3, #75	; 0x4b
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (z == 75) {
 80005de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e0:	2b4b      	cmp	r3, #75	; 0x4b
 80005e2:	d107      	bne.n	80005f4 <main+0x11c>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2180      	movs	r1, #128	; 0x80
 80005e8:	485c      	ldr	r0, [pc, #368]	; (800075c <main+0x284>)
 80005ea:	f000 ffbb 	bl	8001564 <HAL_GPIO_WritePin>

					z = 100;
 80005ee:	2364      	movs	r3, #100	; 0x64
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
 80005f2:	e006      	b.n	8000602 <main+0x12a>
				} else {
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2180      	movs	r1, #128	; 0x80
 80005f8:	4858      	ldr	r0, [pc, #352]	; (800075c <main+0x284>)
 80005fa:	f000 ffb3 	bl	8001564 <HAL_GPIO_WritePin>

					z = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
				}
			}
			if (clk[0] == GPIO_PIN_RESET && clk[1] == GPIO_PIN_SET) {
 8000602:	7c3b      	ldrb	r3, [r7, #16]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d11a      	bne.n	800063e <main+0x166>
 8000608:	7c7b      	ldrb	r3, [r7, #17]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d117      	bne.n	800063e <main+0x166>
				if (LED_HalfPeriod == 1000) {
 800060e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000610:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000614:	d103      	bne.n	800061e <main+0x146>
					LED_HalfPeriod = 500;
 8000616:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800061a:	847b      	strh	r3, [r7, #34]	; 0x22
 800061c:	e00f      	b.n	800063e <main+0x166>
				} else if (LED_HalfPeriod == 500) {
 800061e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000620:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000624:	d102      	bne.n	800062c <main+0x154>
					LED_HalfPeriod = 250;
 8000626:	23fa      	movs	r3, #250	; 0xfa
 8000628:	847b      	strh	r3, [r7, #34]	; 0x22
 800062a:	e008      	b.n	800063e <main+0x166>
				} else if (LED_HalfPeriod == 250) {
 800062c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800062e:	2bfa      	cmp	r3, #250	; 0xfa
 8000630:	d102      	bne.n	8000638 <main+0x160>
					LED_HalfPeriod = 500 / 3;
 8000632:	23a6      	movs	r3, #166	; 0xa6
 8000634:	847b      	strh	r3, [r7, #34]	; 0x22
 8000636:	e002      	b.n	800063e <main+0x166>
				}

				else {
					LED_HalfPeriod = 1000;
 8000638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063c:	847b      	strh	r3, [r7, #34]	; 0x22
				}
			}
			clk[1] = clk[0];
 800063e:	7c3b      	ldrb	r3, [r7, #16]
 8000640:	747b      	strb	r3, [r7, #17]
			clk2[1] = clk2[0];
 8000642:	7b3b      	ldrb	r3, [r7, #12]
 8000644:	737b      	strb	r3, [r7, #13]
			clk3[1] = clk3[0];
 8000646:	7a3b      	ldrb	r3, [r7, #8]
 8000648:	727b      	strb	r3, [r7, #9]
			clk4[1] = clk4[0];
 800064a:	793b      	ldrb	r3, [r7, #4]
 800064c:	717b      	strb	r3, [r7, #5]
		}
		if (y == 0) {
 800064e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000650:	2b00      	cmp	r3, #0
 8000652:	d12e      	bne.n	80006b2 <main+0x1da>
			if (HAL_GetTick() - count3 >= 1500) {
 8000654:	f000 fcce 	bl	8000ff4 <HAL_GetTick>
 8000658:	4602      	mov	r2, r0
 800065a:	69bb      	ldr	r3, [r7, #24]
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	f240 52db 	movw	r2, #1499	; 0x5db
 8000662:	4293      	cmp	r3, r2
 8000664:	d90e      	bls.n	8000684 <main+0x1ac>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 1) {
 8000666:	2140      	movs	r1, #64	; 0x40
 8000668:	483d      	ldr	r0, [pc, #244]	; (8000760 <main+0x288>)
 800066a:	f000 ff63 	bl	8001534 <HAL_GPIO_ReadPin>
 800066e:	4603      	mov	r3, r0
 8000670:	2b01      	cmp	r3, #1
 8000672:	d107      	bne.n	8000684 <main+0x1ac>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2140      	movs	r1, #64	; 0x40
 8000678:	4839      	ldr	r0, [pc, #228]	; (8000760 <main+0x288>)
 800067a:	f000 ff73 	bl	8001564 <HAL_GPIO_WritePin>
					count3 = HAL_GetTick();
 800067e:	f000 fcb9 	bl	8000ff4 <HAL_GetTick>
 8000682:	61b8      	str	r0, [r7, #24]
				}
			}

			if (HAL_GetTick() - count3 >= 500) {
 8000684:	f000 fcb6 	bl	8000ff4 <HAL_GetTick>
 8000688:	4602      	mov	r2, r0
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000692:	d30e      	bcc.n	80006b2 <main+0x1da>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0) {
 8000694:	2140      	movs	r1, #64	; 0x40
 8000696:	4832      	ldr	r0, [pc, #200]	; (8000760 <main+0x288>)
 8000698:	f000 ff4c 	bl	8001534 <HAL_GPIO_ReadPin>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d107      	bne.n	80006b2 <main+0x1da>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 80006a2:	2201      	movs	r2, #1
 80006a4:	2140      	movs	r1, #64	; 0x40
 80006a6:	482e      	ldr	r0, [pc, #184]	; (8000760 <main+0x288>)
 80006a8:	f000 ff5c 	bl	8001564 <HAL_GPIO_WritePin>
					count3 = HAL_GetTick();
 80006ac:	f000 fca2 	bl	8000ff4 <HAL_GetTick>
 80006b0:	61b8      	str	r0, [r7, #24]
				}

			}

		}
		if (y == 1) {
 80006b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d12e      	bne.n	8000716 <main+0x23e>
			if (HAL_GetTick() - count3 >= 500) {
 80006b8:	f000 fc9c 	bl	8000ff4 <HAL_GetTick>
 80006bc:	4602      	mov	r2, r0
 80006be:	69bb      	ldr	r3, [r7, #24]
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80006c6:	d30e      	bcc.n	80006e6 <main+0x20e>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 1) {
 80006c8:	2140      	movs	r1, #64	; 0x40
 80006ca:	4825      	ldr	r0, [pc, #148]	; (8000760 <main+0x288>)
 80006cc:	f000 ff32 	bl	8001534 <HAL_GPIO_ReadPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d107      	bne.n	80006e6 <main+0x20e>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2140      	movs	r1, #64	; 0x40
 80006da:	4821      	ldr	r0, [pc, #132]	; (8000760 <main+0x288>)
 80006dc:	f000 ff42 	bl	8001564 <HAL_GPIO_WritePin>
					count3 = HAL_GetTick();
 80006e0:	f000 fc88 	bl	8000ff4 <HAL_GetTick>
 80006e4:	61b8      	str	r0, [r7, #24]
				}
			}

			if (HAL_GetTick() - count3 >= 1500) {
 80006e6:	f000 fc85 	bl	8000ff4 <HAL_GetTick>
 80006ea:	4602      	mov	r2, r0
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	f240 52db 	movw	r2, #1499	; 0x5db
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d90e      	bls.n	8000716 <main+0x23e>

				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0) {
 80006f8:	2140      	movs	r1, #64	; 0x40
 80006fa:	4819      	ldr	r0, [pc, #100]	; (8000760 <main+0x288>)
 80006fc:	f000 ff1a 	bl	8001534 <HAL_GPIO_ReadPin>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d107      	bne.n	8000716 <main+0x23e>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000706:	2201      	movs	r2, #1
 8000708:	2140      	movs	r1, #64	; 0x40
 800070a:	4815      	ldr	r0, [pc, #84]	; (8000760 <main+0x288>)
 800070c:	f000 ff2a 	bl	8001564 <HAL_GPIO_WritePin>
					count3 = HAL_GetTick();
 8000710:	f000 fc70 	bl	8000ff4 <HAL_GetTick>
 8000714:	61b8      	str	r0, [r7, #24]

			}

		}

		if (HAL_GetTick() - count >= LED_HalfPeriod) {
 8000716:	f000 fc6d 	bl	8000ff4 <HAL_GetTick>
 800071a:	4602      	mov	r2, r0
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	1ad2      	subs	r2, r2, r3
 8000720:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000722:	429a      	cmp	r2, r3
 8000724:	f4ff aef6 	bcc.w	8000514 <main+0x3c>
			count = HAL_GetTick();
 8000728:	f000 fc64 	bl	8000ff4 <HAL_GetTick>
 800072c:	61f8      	str	r0, [r7, #28]
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1) {
 800072e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000732:	480a      	ldr	r0, [pc, #40]	; (800075c <main+0x284>)
 8000734:	f000 fefe 	bl	8001534 <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	2b01      	cmp	r3, #1
 800073c:	d106      	bne.n	800074c <main+0x274>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000744:	4805      	ldr	r0, [pc, #20]	; (800075c <main+0x284>)
 8000746:	f000 ff0d 	bl	8001564 <HAL_GPIO_WritePin>
 800074a:	e6e3      	b.n	8000514 <main+0x3c>
			} else {
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000752:	4802      	ldr	r0, [pc, #8]	; (800075c <main+0x284>)
 8000754:	f000 ff06 	bl	8001564 <HAL_GPIO_WritePin>
		if (HAL_GetTick() - tbotton >= 100) {
 8000758:	e6dc      	b.n	8000514 <main+0x3c>
 800075a:	bf00      	nop
 800075c:	40020000 	.word	0x40020000
 8000760:	40020400 	.word	0x40020400
 8000764:	40020800 	.word	0x40020800

08000768 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b094      	sub	sp, #80	; 0x50
 800076c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800076e:	f107 0320 	add.w	r3, r7, #32
 8000772:	2230      	movs	r2, #48	; 0x30
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f002 fdf0 	bl	800335c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	4b28      	ldr	r3, [pc, #160]	; (8000834 <SystemClock_Config+0xcc>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	4a27      	ldr	r2, [pc, #156]	; (8000834 <SystemClock_Config+0xcc>)
 8000796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079a:	6413      	str	r3, [r2, #64]	; 0x40
 800079c:	4b25      	ldr	r3, [pc, #148]	; (8000834 <SystemClock_Config+0xcc>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a8:	2300      	movs	r3, #0
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <SystemClock_Config+0xd0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a21      	ldr	r2, [pc, #132]	; (8000838 <SystemClock_Config+0xd0>)
 80007b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <SystemClock_Config+0xd0>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c4:	2302      	movs	r3, #2
 80007c6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c8:	2301      	movs	r3, #1
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007cc:	2310      	movs	r3, #16
 80007ce:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d0:	2302      	movs	r3, #2
 80007d2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d4:	2300      	movs	r3, #0
 80007d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80007d8:	2310      	movs	r3, #16
 80007da:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80007dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007e0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007e2:	2304      	movs	r3, #4
 80007e4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80007e6:	2304      	movs	r3, #4
 80007e8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007ea:	f107 0320 	add.w	r3, r7, #32
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 fed2 	bl	8001598 <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x96>
		Error_Handler();
 80007fa:	f000 fa13 	bl	8000c24 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2302      	movs	r3, #2
 8000804:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000806:	2380      	movs	r3, #128	; 0x80
 8000808:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800080a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2101      	movs	r1, #1
 800081a:	4618      	mov	r0, r3
 800081c:	f001 f92c 	bl	8001a78 <HAL_RCC_ClockConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0xc2>
		Error_Handler();
 8000826:	f000 f9fd 	bl	8000c24 <Error_Handler>
	}
}
 800082a:	bf00      	nop
 800082c:	3750      	adds	r7, #80	; 0x50
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800
 8000838:	40007000 	.word	0x40007000

0800083c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b096      	sub	sp, #88	; 0x58
 8000840:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000842:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000850:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800085a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
 800086a:	615a      	str	r2, [r3, #20]
 800086c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2220      	movs	r2, #32
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f002 fd71 	bl	800335c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800087a:	4b3f      	ldr	r3, [pc, #252]	; (8000978 <MX_TIM1_Init+0x13c>)
 800087c:	4a3f      	ldr	r2, [pc, #252]	; (800097c <MX_TIM1_Init+0x140>)
 800087e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 800;
 8000880:	4b3d      	ldr	r3, [pc, #244]	; (8000978 <MX_TIM1_Init+0x13c>)
 8000882:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000886:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000888:	4b3b      	ldr	r3, [pc, #236]	; (8000978 <MX_TIM1_Init+0x13c>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 500;
 800088e:	4b3a      	ldr	r3, [pc, #232]	; (8000978 <MX_TIM1_Init+0x13c>)
 8000890:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000894:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000896:	4b38      	ldr	r3, [pc, #224]	; (8000978 <MX_TIM1_Init+0x13c>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800089c:	4b36      	ldr	r3, [pc, #216]	; (8000978 <MX_TIM1_Init+0x13c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a2:	4b35      	ldr	r3, [pc, #212]	; (8000978 <MX_TIM1_Init+0x13c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80008a8:	4833      	ldr	r0, [pc, #204]	; (8000978 <MX_TIM1_Init+0x13c>)
 80008aa:	f001 fad7 	bl	8001e5c <HAL_TIM_Base_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM1_Init+0x7c>
		Error_Handler();
 80008b4:	f000 f9b6 	bl	8000c24 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008bc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80008be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008c2:	4619      	mov	r1, r3
 80008c4:	482c      	ldr	r0, [pc, #176]	; (8000978 <MX_TIM1_Init+0x13c>)
 80008c6:	f001 fcf7 	bl	80022b8 <HAL_TIM_ConfigClockSource>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM1_Init+0x98>
		Error_Handler();
 80008d0:	f000 f9a8 	bl	8000c24 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80008d4:	4828      	ldr	r0, [pc, #160]	; (8000978 <MX_TIM1_Init+0x13c>)
 80008d6:	f001 faec 	bl	8001eb2 <HAL_TIM_PWM_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM1_Init+0xa8>
		Error_Handler();
 80008e0:	f000 f9a0 	bl	8000c24 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e4:	2300      	movs	r3, #0
 80008e6:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80008ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008f0:	4619      	mov	r1, r3
 80008f2:	4821      	ldr	r0, [pc, #132]	; (8000978 <MX_TIM1_Init+0x13c>)
 80008f4:	f002 f870 	bl	80029d8 <HAL_TIMEx_MasterConfigSynchronization>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM1_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 80008fe:	f000 f991 	bl	8000c24 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000902:	2360      	movs	r3, #96	; 0x60
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800090a:	2300      	movs	r3, #0
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800090e:	2300      	movs	r3, #0
 8000910:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000916:	2300      	movs	r3, #0
 8000918:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800091a:	2300      	movs	r3, #0
 800091c:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800091e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000922:	2200      	movs	r2, #0
 8000924:	4619      	mov	r1, r3
 8000926:	4814      	ldr	r0, [pc, #80]	; (8000978 <MX_TIM1_Init+0x13c>)
 8000928:	f001 fc00 	bl	800212c <HAL_TIM_PWM_ConfigChannel>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM1_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 8000932:	f000 f977 	bl	8000c24 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800094a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800094e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	4619      	mov	r1, r3
 8000958:	4807      	ldr	r0, [pc, #28]	; (8000978 <MX_TIM1_Init+0x13c>)
 800095a:	f002 f8ab 	bl	8002ab4 <HAL_TIMEx_ConfigBreakDeadTime>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM1_Init+0x12c>
			!= HAL_OK) {
		Error_Handler();
 8000964:	f000 f95e 	bl	8000c24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000968:	4803      	ldr	r0, [pc, #12]	; (8000978 <MX_TIM1_Init+0x13c>)
 800096a:	f000 f9c3 	bl	8000cf4 <HAL_TIM_MspPostInit>

}
 800096e:	bf00      	nop
 8000970:	3758      	adds	r7, #88	; 0x58
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000028 	.word	0x20000028
 800097c:	40010000 	.word	0x40010000

08000980 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b08e      	sub	sp, #56	; 0x38
 8000984:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000994:	f107 0320 	add.w	r3, r7, #32
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
 80009ac:	615a      	str	r2, [r3, #20]
 80009ae:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80009b0:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <MX_TIM2_Init+0xe8>)
 80009b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009b6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 127;
 80009b8:	4b2b      	ldr	r3, [pc, #172]	; (8000a68 <MX_TIM2_Init+0xe8>)
 80009ba:	227f      	movs	r2, #127	; 0x7f
 80009bc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009be:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <MX_TIM2_Init+0xe8>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 62499;
 80009c4:	4b28      	ldr	r3, [pc, #160]	; (8000a68 <MX_TIM2_Init+0xe8>)
 80009c6:	f24f 4223 	movw	r2, #62499	; 0xf423
 80009ca:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009cc:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <MX_TIM2_Init+0xe8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d2:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <MX_TIM2_Init+0xe8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80009d8:	4823      	ldr	r0, [pc, #140]	; (8000a68 <MX_TIM2_Init+0xe8>)
 80009da:	f001 fa3f 	bl	8001e5c <HAL_TIM_Base_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM2_Init+0x68>
		Error_Handler();
 80009e4:	f000 f91e 	bl	8000c24 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80009ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f2:	4619      	mov	r1, r3
 80009f4:	481c      	ldr	r0, [pc, #112]	; (8000a68 <MX_TIM2_Init+0xe8>)
 80009f6:	f001 fc5f 	bl	80022b8 <HAL_TIM_ConfigClockSource>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM2_Init+0x84>
		Error_Handler();
 8000a00:	f000 f910 	bl	8000c24 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000a04:	4818      	ldr	r0, [pc, #96]	; (8000a68 <MX_TIM2_Init+0xe8>)
 8000a06:	f001 fa54 	bl	8001eb2 <HAL_TIM_PWM_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM2_Init+0x94>
		Error_Handler();
 8000a10:	f000 f908 	bl	8000c24 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000a1c:	f107 0320 	add.w	r3, r7, #32
 8000a20:	4619      	mov	r1, r3
 8000a22:	4811      	ldr	r0, [pc, #68]	; (8000a68 <MX_TIM2_Init+0xe8>)
 8000a24:	f001 ffd8 	bl	80029d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8000a2e:	f000 f8f9 	bl	8000c24 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a32:	2360      	movs	r3, #96	; 0x60
 8000a34:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 31250;
 8000a36:	f647 2312 	movw	r3, #31250	; 0x7a12
 8000a3a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2200      	movs	r2, #0
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4807      	ldr	r0, [pc, #28]	; (8000a68 <MX_TIM2_Init+0xe8>)
 8000a4c:	f001 fb6e 	bl	800212c <HAL_TIM_PWM_ConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 8000a56:	f000 f8e5 	bl	8000c24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000a5a:	4803      	ldr	r0, [pc, #12]	; (8000a68 <MX_TIM2_Init+0xe8>)
 8000a5c:	f000 f94a 	bl	8000cf4 <HAL_TIM_MspPostInit>

}
 8000a60:	bf00      	nop
 8000a62:	3738      	adds	r7, #56	; 0x38
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000068 	.word	0x20000068

08000a6c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <MX_USART2_UART_Init+0x50>)
 8000a74:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a7c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000aa4:	f002 f86c 	bl	8002b80 <HAL_UART_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000aae:	f000 f8b9 	bl	8000c24 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200000a8 	.word	0x200000a8
 8000abc:	40004400 	.word	0x40004400

08000ac0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b4d      	ldr	r3, [pc, #308]	; (8000c10 <MX_GPIO_Init+0x150>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a4c      	ldr	r2, [pc, #304]	; (8000c10 <MX_GPIO_Init+0x150>)
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b4a      	ldr	r3, [pc, #296]	; (8000c10 <MX_GPIO_Init+0x150>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0304 	and.w	r3, r3, #4
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b46      	ldr	r3, [pc, #280]	; (8000c10 <MX_GPIO_Init+0x150>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a45      	ldr	r2, [pc, #276]	; (8000c10 <MX_GPIO_Init+0x150>)
 8000afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b43      	ldr	r3, [pc, #268]	; (8000c10 <MX_GPIO_Init+0x150>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	4b3f      	ldr	r3, [pc, #252]	; (8000c10 <MX_GPIO_Init+0x150>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a3e      	ldr	r2, [pc, #248]	; (8000c10 <MX_GPIO_Init+0x150>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b3c      	ldr	r3, [pc, #240]	; (8000c10 <MX_GPIO_Init+0x150>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b38      	ldr	r3, [pc, #224]	; (8000c10 <MX_GPIO_Init+0x150>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a37      	ldr	r2, [pc, #220]	; (8000c10 <MX_GPIO_Init+0x150>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b35      	ldr	r3, [pc, #212]	; (8000c10 <MX_GPIO_Init+0x150>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_9, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000b4c:	4831      	ldr	r0, [pc, #196]	; (8000c14 <MX_GPIO_Init+0x154>)
 8000b4e:	f000 fd09 	bl	8001564 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	4830      	ldr	r0, [pc, #192]	; (8000c18 <MX_GPIO_Init+0x158>)
 8000b58:	f000 fd04 	bl	8001564 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2140      	movs	r1, #64	; 0x40
 8000b60:	482e      	ldr	r0, [pc, #184]	; (8000c1c <MX_GPIO_Init+0x15c>)
 8000b62:	f000 fcff 	bl	8001564 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000b66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b6a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b6c:	4b2c      	ldr	r3, [pc, #176]	; (8000c20 <MX_GPIO_Init+0x160>)
 8000b6e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4827      	ldr	r0, [pc, #156]	; (8000c18 <MX_GPIO_Init+0x158>)
 8000b7c:	f000 fb58 	bl	8001230 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA7 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_9;
 8000b80:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000b84:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	481e      	ldr	r0, [pc, #120]	; (8000c14 <MX_GPIO_Init+0x154>)
 8000b9a:	f000 fb49 	bl	8001230 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b9e:	2380      	movs	r3, #128	; 0x80
 8000ba0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4818      	ldr	r0, [pc, #96]	; (8000c18 <MX_GPIO_Init+0x158>)
 8000bb6:	f000 fb3b 	bl	8001230 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bbe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4811      	ldr	r0, [pc, #68]	; (8000c14 <MX_GPIO_Init+0x154>)
 8000bd0:	f000 fb2e 	bl	8001230 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB3 PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8000bd4:	2338      	movs	r3, #56	; 0x38
 8000bd6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	480d      	ldr	r0, [pc, #52]	; (8000c1c <MX_GPIO_Init+0x15c>)
 8000be8:	f000 fb22 	bl	8001230 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bec:	2340      	movs	r3, #64	; 0x40
 8000bee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	4806      	ldr	r0, [pc, #24]	; (8000c1c <MX_GPIO_Init+0x15c>)
 8000c04:	f000 fb14 	bl	8001230 <HAL_GPIO_Init>

}
 8000c08:	bf00      	nop
 8000c0a:	3728      	adds	r7, #40	; 0x28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020000 	.word	0x40020000
 8000c18:	40020800 	.word	0x40020800
 8000c1c:	40020400 	.word	0x40020400
 8000c20:	10210000 	.word	0x10210000

08000c24 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c28:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c2a:	e7fe      	b.n	8000c2a <Error_Handler+0x6>

08000c2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c40:	6453      	str	r3, [r2, #68]	; 0x44
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c6a:	2007      	movs	r0, #7
 8000c6c:	f000 fa9e 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40023800 	.word	0x40023800

08000c7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a18      	ldr	r2, [pc, #96]	; (8000cec <HAL_TIM_Base_MspInit+0x70>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d116      	bne.n	8000cbc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_TIM_Base_MspInit+0x74>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a16      	ldr	r2, [pc, #88]	; (8000cf0 <HAL_TIM_Base_MspInit+0x74>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <HAL_TIM_Base_MspInit+0x74>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	2019      	movs	r0, #25
 8000cb0:	f000 fa87 	bl	80011c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cb4:	2019      	movs	r0, #25
 8000cb6:	f000 faa0 	bl	80011fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cba:	e012      	b.n	8000ce2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cc4:	d10d      	bne.n	8000ce2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <HAL_TIM_Base_MspInit+0x74>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a08      	ldr	r2, [pc, #32]	; (8000cf0 <HAL_TIM_Base_MspInit+0x74>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_TIM_Base_MspInit+0x74>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
}
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40010000 	.word	0x40010000
 8000cf0:	40023800 	.word	0x40023800

08000cf4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a24      	ldr	r2, [pc, #144]	; (8000da4 <HAL_TIM_MspPostInit+0xb0>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d11f      	bne.n	8000d56 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b23      	ldr	r3, [pc, #140]	; (8000da8 <HAL_TIM_MspPostInit+0xb4>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a22      	ldr	r2, [pc, #136]	; (8000da8 <HAL_TIM_MspPostInit+0xb4>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b20      	ldr	r3, [pc, #128]	; (8000da8 <HAL_TIM_MspPostInit+0xb4>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d44:	2301      	movs	r3, #1
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4817      	ldr	r0, [pc, #92]	; (8000dac <HAL_TIM_MspPostInit+0xb8>)
 8000d50:	f000 fa6e 	bl	8001230 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d54:	e022      	b.n	8000d9c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d5e:	d11d      	bne.n	8000d9c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <HAL_TIM_MspPostInit+0xb4>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	4a0f      	ldr	r2, [pc, #60]	; (8000da8 <HAL_TIM_MspPostInit+0xb4>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <HAL_TIM_MspPostInit+0xb4>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d7c:	2320      	movs	r3, #32
 8000d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <HAL_TIM_MspPostInit+0xb8>)
 8000d98:	f000 fa4a 	bl	8001230 <HAL_GPIO_Init>
}
 8000d9c:	bf00      	nop
 8000d9e:	3728      	adds	r7, #40	; 0x28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40010000 	.word	0x40010000
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020000 	.word	0x40020000

08000db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a19      	ldr	r2, [pc, #100]	; (8000e34 <HAL_UART_MspInit+0x84>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d12b      	bne.n	8000e2a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de0:	6413      	str	r3, [r2, #64]	; 0x40
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e0a:	230c      	movs	r3, #12
 8000e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e16:	2303      	movs	r3, #3
 8000e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	4805      	ldr	r0, [pc, #20]	; (8000e3c <HAL_UART_MspInit+0x8c>)
 8000e26:	f000 fa03 	bl	8001230 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	; 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40004400 	.word	0x40004400
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020000 	.word	0x40020000

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <NMI_Handler+0x4>

08000e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <MemManage_Handler+0x4>

08000e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8c:	f000 f89e 	bl	8000fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e9a:	f001 f83f 	bl	8001f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000028 	.word	0x20000028

08000ea8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <SystemInit+0x28>)
 8000eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb2:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <SystemInit+0x28>)
 8000eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <SystemInit+0x28>)
 8000ebe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ec2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ed8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000eda:	e003      	b.n	8000ee4 <LoopCopyDataInit>

08000edc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ede:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ee0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ee2:	3104      	adds	r1, #4

08000ee4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ee4:	480b      	ldr	r0, [pc, #44]	; (8000f14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ee8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000eea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000eec:	d3f6      	bcc.n	8000edc <CopyDataInit>
  ldr  r2, =_sbss
 8000eee:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ef0:	e002      	b.n	8000ef8 <LoopFillZerobss>

08000ef2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ef2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ef4:	f842 3b04 	str.w	r3, [r2], #4

08000ef8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000efa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000efc:	d3f9      	bcc.n	8000ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000efe:	f7ff ffd3 	bl	8000ea8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f02:	f002 fa07 	bl	8003314 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f06:	f7ff fae7 	bl	80004d8 <main>
  bx  lr    
 8000f0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f10:	080033ac 	.word	0x080033ac
  ldr  r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f18:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000f1c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000f20:	200000ec 	.word	0x200000ec

08000f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC_IRQHandler>
	...

08000f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <HAL_Init+0x40>)
 8000f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <HAL_Init+0x40>)
 8000f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_Init+0x40>)
 8000f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f000 f92b 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f000 f808 	bl	8000f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5c:	f7ff fe66 	bl	8000c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023c00 	.word	0x40023c00

08000f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_InitTick+0x54>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x58>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f943 	bl	8001216 <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00e      	b.n	8000fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d80a      	bhi.n	8000fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f000 f90b 	bl	80011c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <HAL_InitTick+0x5c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20000004 	.word	0x20000004

08000fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x20>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	200000e8 	.word	0x200000e8

08000ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	200000e8 	.word	0x200000e8

0800100c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001028:	4013      	ands	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <__NVIC_GetPriorityGrouping+0x18>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f003 0307 	and.w	r3, r3, #7
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	db0b      	blt.n	800109a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f003 021f 	and.w	r2, r3, #31
 8001088:	4907      	ldr	r1, [pc, #28]	; (80010a8 <__NVIC_EnableIRQ+0x38>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	095b      	lsrs	r3, r3, #5
 8001090:	2001      	movs	r0, #1
 8001092:	fa00 f202 	lsl.w	r2, r0, r2
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	; (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	; (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	; 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001178:	d301      	bcc.n	800117e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117a:	2301      	movs	r3, #1
 800117c:	e00f      	b.n	800119e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <SysTick_Config+0x40>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001186:	210f      	movs	r1, #15
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f7ff ff8e 	bl	80010ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <SysTick_Config+0x40>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <SysTick_Config+0x40>)
 8001198:	2207      	movs	r2, #7
 800119a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	e000e010 	.word	0xe000e010

080011ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff29 	bl	800100c <__NVIC_SetPriorityGrouping>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d4:	f7ff ff3e 	bl	8001054 <__NVIC_GetPriorityGrouping>
 80011d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	6978      	ldr	r0, [r7, #20]
 80011e0:	f7ff ff8e 	bl	8001100 <NVIC_EncodePriority>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff5d 	bl	80010ac <__NVIC_SetPriority>
}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff31 	bl	8001070 <__NVIC_EnableIRQ>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ffa2 	bl	8001168 <SysTick_Config>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
 800124a:	e159      	b.n	8001500 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800124c:	2201      	movs	r2, #1
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	429a      	cmp	r2, r3
 8001266:	f040 8148 	bne.w	80014fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d00b      	beq.n	800128a <HAL_GPIO_Init+0x5a>
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d007      	beq.n	800128a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800127e:	2b11      	cmp	r3, #17
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b12      	cmp	r3, #18
 8001288:	d130      	bne.n	80012ec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2203      	movs	r2, #3
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c0:	2201      	movs	r2, #1
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	091b      	lsrs	r3, r3, #4
 80012d6:	f003 0201 	and.w	r2, r3, #1
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	2203      	movs	r2, #3
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0xfc>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b12      	cmp	r3, #18
 800132a:	d123      	bne.n	8001374 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	08da      	lsrs	r2, r3, #3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3208      	adds	r2, #8
 8001334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	220f      	movs	r2, #15
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	08da      	lsrs	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3208      	adds	r2, #8
 800136e:	69b9      	ldr	r1, [r7, #24]
 8001370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	2203      	movs	r2, #3
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0203 	and.w	r2, r3, #3
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80a2 	beq.w	80014fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b56      	ldr	r3, [pc, #344]	; (8001514 <HAL_GPIO_Init+0x2e4>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	4a55      	ldr	r2, [pc, #340]	; (8001514 <HAL_GPIO_Init+0x2e4>)
 80013c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c4:	6453      	str	r3, [r2, #68]	; 0x44
 80013c6:	4b53      	ldr	r3, [pc, #332]	; (8001514 <HAL_GPIO_Init+0x2e4>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013d2:	4a51      	ldr	r2, [pc, #324]	; (8001518 <HAL_GPIO_Init+0x2e8>)
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	3302      	adds	r3, #2
 80013da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	220f      	movs	r2, #15
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a48      	ldr	r2, [pc, #288]	; (800151c <HAL_GPIO_Init+0x2ec>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d019      	beq.n	8001432 <HAL_GPIO_Init+0x202>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a47      	ldr	r2, [pc, #284]	; (8001520 <HAL_GPIO_Init+0x2f0>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d013      	beq.n	800142e <HAL_GPIO_Init+0x1fe>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a46      	ldr	r2, [pc, #280]	; (8001524 <HAL_GPIO_Init+0x2f4>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d00d      	beq.n	800142a <HAL_GPIO_Init+0x1fa>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a45      	ldr	r2, [pc, #276]	; (8001528 <HAL_GPIO_Init+0x2f8>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d007      	beq.n	8001426 <HAL_GPIO_Init+0x1f6>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a44      	ldr	r2, [pc, #272]	; (800152c <HAL_GPIO_Init+0x2fc>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d101      	bne.n	8001422 <HAL_GPIO_Init+0x1f2>
 800141e:	2304      	movs	r3, #4
 8001420:	e008      	b.n	8001434 <HAL_GPIO_Init+0x204>
 8001422:	2307      	movs	r3, #7
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x204>
 8001426:	2303      	movs	r3, #3
 8001428:	e004      	b.n	8001434 <HAL_GPIO_Init+0x204>
 800142a:	2302      	movs	r3, #2
 800142c:	e002      	b.n	8001434 <HAL_GPIO_Init+0x204>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_GPIO_Init+0x204>
 8001432:	2300      	movs	r3, #0
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	f002 0203 	and.w	r2, r2, #3
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	4093      	lsls	r3, r2
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001444:	4934      	ldr	r1, [pc, #208]	; (8001518 <HAL_GPIO_Init+0x2e8>)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	3302      	adds	r3, #2
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001452:	4b37      	ldr	r3, [pc, #220]	; (8001530 <HAL_GPIO_Init+0x300>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001476:	4a2e      	ldr	r2, [pc, #184]	; (8001530 <HAL_GPIO_Init+0x300>)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800147c:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <HAL_GPIO_Init+0x300>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014a0:	4a23      	ldr	r2, [pc, #140]	; (8001530 <HAL_GPIO_Init+0x300>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014a6:	4b22      	ldr	r3, [pc, #136]	; (8001530 <HAL_GPIO_Init+0x300>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ca:	4a19      	ldr	r2, [pc, #100]	; (8001530 <HAL_GPIO_Init+0x300>)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d0:	4b17      	ldr	r3, [pc, #92]	; (8001530 <HAL_GPIO_Init+0x300>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014f4:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <HAL_GPIO_Init+0x300>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3301      	adds	r3, #1
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	2b0f      	cmp	r3, #15
 8001504:	f67f aea2 	bls.w	800124c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001508:	bf00      	nop
 800150a:	3724      	adds	r7, #36	; 0x24
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	40023800 	.word	0x40023800
 8001518:	40013800 	.word	0x40013800
 800151c:	40020000 	.word	0x40020000
 8001520:	40020400 	.word	0x40020400
 8001524:	40020800 	.word	0x40020800
 8001528:	40020c00 	.word	0x40020c00
 800152c:	40021000 	.word	0x40021000
 8001530:	40013c00 	.word	0x40013c00

08001534 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691a      	ldr	r2, [r3, #16]
 8001544:	887b      	ldrh	r3, [r7, #2]
 8001546:	4013      	ands	r3, r2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e001      	b.n	8001556 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001556:	7bfb      	ldrb	r3, [r7, #15]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
 8001570:	4613      	mov	r3, r2
 8001572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001574:	787b      	ldrb	r3, [r7, #1]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800157a:	887a      	ldrh	r2, [r7, #2]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001580:	e003      	b.n	800158a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	041a      	lsls	r2, r3, #16
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	619a      	str	r2, [r3, #24]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e25b      	b.n	8001a62 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d075      	beq.n	80016a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015b6:	4ba3      	ldr	r3, [pc, #652]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	2b04      	cmp	r3, #4
 80015c0:	d00c      	beq.n	80015dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015c2:	4ba0      	ldr	r3, [pc, #640]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d112      	bne.n	80015f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ce:	4b9d      	ldr	r3, [pc, #628]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015da:	d10b      	bne.n	80015f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	4b99      	ldr	r3, [pc, #612]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d05b      	beq.n	80016a0 <HAL_RCC_OscConfig+0x108>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d157      	bne.n	80016a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e236      	b.n	8001a62 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fc:	d106      	bne.n	800160c <HAL_RCC_OscConfig+0x74>
 80015fe:	4b91      	ldr	r3, [pc, #580]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a90      	ldr	r2, [pc, #576]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	e01d      	b.n	8001648 <HAL_RCC_OscConfig+0xb0>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001614:	d10c      	bne.n	8001630 <HAL_RCC_OscConfig+0x98>
 8001616:	4b8b      	ldr	r3, [pc, #556]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a8a      	ldr	r2, [pc, #552]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	4b88      	ldr	r3, [pc, #544]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a87      	ldr	r2, [pc, #540]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e00b      	b.n	8001648 <HAL_RCC_OscConfig+0xb0>
 8001630:	4b84      	ldr	r3, [pc, #528]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a83      	ldr	r2, [pc, #524]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	4b81      	ldr	r3, [pc, #516]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a80      	ldr	r2, [pc, #512]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d013      	beq.n	8001678 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff fcd0 	bl	8000ff4 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001658:	f7ff fccc 	bl	8000ff4 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b64      	cmp	r3, #100	; 0x64
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e1fb      	b.n	8001a62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166a:	4b76      	ldr	r3, [pc, #472]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0xc0>
 8001676:	e014      	b.n	80016a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fcbc 	bl	8000ff4 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001680:	f7ff fcb8 	bl	8000ff4 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b64      	cmp	r3, #100	; 0x64
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e1e7      	b.n	8001a62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001692:	4b6c      	ldr	r3, [pc, #432]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0xe8>
 800169e:	e000      	b.n	80016a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d063      	beq.n	8001776 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ae:	4b65      	ldr	r3, [pc, #404]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00b      	beq.n	80016d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ba:	4b62      	ldr	r3, [pc, #392]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016c2:	2b08      	cmp	r3, #8
 80016c4:	d11c      	bne.n	8001700 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016c6:	4b5f      	ldr	r3, [pc, #380]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d116      	bne.n	8001700 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d2:	4b5c      	ldr	r3, [pc, #368]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d005      	beq.n	80016ea <HAL_RCC_OscConfig+0x152>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d001      	beq.n	80016ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e1bb      	b.n	8001a62 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ea:	4b56      	ldr	r3, [pc, #344]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	4952      	ldr	r1, [pc, #328]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fe:	e03a      	b.n	8001776 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d020      	beq.n	800174a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001708:	4b4f      	ldr	r3, [pc, #316]	; (8001848 <HAL_RCC_OscConfig+0x2b0>)
 800170a:	2201      	movs	r2, #1
 800170c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170e:	f7ff fc71 	bl	8000ff4 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001716:	f7ff fc6d 	bl	8000ff4 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e19c      	b.n	8001a62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001728:	4b46      	ldr	r3, [pc, #280]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001734:	4b43      	ldr	r3, [pc, #268]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	4940      	ldr	r1, [pc, #256]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001744:	4313      	orrs	r3, r2
 8001746:	600b      	str	r3, [r1, #0]
 8001748:	e015      	b.n	8001776 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800174a:	4b3f      	ldr	r3, [pc, #252]	; (8001848 <HAL_RCC_OscConfig+0x2b0>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff fc50 	bl	8000ff4 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001758:	f7ff fc4c 	bl	8000ff4 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e17b      	b.n	8001a62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176a:	4b36      	ldr	r3, [pc, #216]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	2b00      	cmp	r3, #0
 8001780:	d030      	beq.n	80017e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d016      	beq.n	80017b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800178a:	4b30      	ldr	r3, [pc, #192]	; (800184c <HAL_RCC_OscConfig+0x2b4>)
 800178c:	2201      	movs	r2, #1
 800178e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001790:	f7ff fc30 	bl	8000ff4 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001798:	f7ff fc2c 	bl	8000ff4 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e15b      	b.n	8001a62 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017aa:	4b26      	ldr	r3, [pc, #152]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80017ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0x200>
 80017b6:	e015      	b.n	80017e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b8:	4b24      	ldr	r3, [pc, #144]	; (800184c <HAL_RCC_OscConfig+0x2b4>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017be:	f7ff fc19 	bl	8000ff4 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c6:	f7ff fc15 	bl	8000ff4 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e144      	b.n	8001a62 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d8:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80017da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1f0      	bne.n	80017c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80a0 	beq.w	8001932 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f6:	4b13      	ldr	r3, [pc, #76]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10f      	bne.n	8001822 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <HAL_RCC_OscConfig+0x2ac>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800181e:	2301      	movs	r3, #1
 8001820:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_RCC_OscConfig+0x2b8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182a:	2b00      	cmp	r3, #0
 800182c:	d121      	bne.n	8001872 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <HAL_RCC_OscConfig+0x2b8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a07      	ldr	r2, [pc, #28]	; (8001850 <HAL_RCC_OscConfig+0x2b8>)
 8001834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800183a:	f7ff fbdb 	bl	8000ff4 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001840:	e011      	b.n	8001866 <HAL_RCC_OscConfig+0x2ce>
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800
 8001848:	42470000 	.word	0x42470000
 800184c:	42470e80 	.word	0x42470e80
 8001850:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001854:	f7ff fbce 	bl	8000ff4 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e0fd      	b.n	8001a62 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001866:	4b81      	ldr	r3, [pc, #516]	; (8001a6c <HAL_RCC_OscConfig+0x4d4>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d106      	bne.n	8001888 <HAL_RCC_OscConfig+0x2f0>
 800187a:	4b7d      	ldr	r3, [pc, #500]	; (8001a70 <HAL_RCC_OscConfig+0x4d8>)
 800187c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187e:	4a7c      	ldr	r2, [pc, #496]	; (8001a70 <HAL_RCC_OscConfig+0x4d8>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6713      	str	r3, [r2, #112]	; 0x70
 8001886:	e01c      	b.n	80018c2 <HAL_RCC_OscConfig+0x32a>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b05      	cmp	r3, #5
 800188e:	d10c      	bne.n	80018aa <HAL_RCC_OscConfig+0x312>
 8001890:	4b77      	ldr	r3, [pc, #476]	; (8001a70 <HAL_RCC_OscConfig+0x4d8>)
 8001892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001894:	4a76      	ldr	r2, [pc, #472]	; (8001a70 <HAL_RCC_OscConfig+0x4d8>)
 8001896:	f043 0304 	orr.w	r3, r3, #4
 800189a:	6713      	str	r3, [r2, #112]	; 0x70
 800189c:	4b74      	ldr	r3, [pc, #464]	; (8001a70 <HAL_RCC_OscConfig+0x4d8>)
 800189e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a0:	4a73      	ldr	r2, [pc, #460]	; (8001a70 <HAL_RCC_OscConfig+0x4d8>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6713      	str	r3, [r2, #112]	; 0x70
 80018a8:	e00b      	b.n	80018c2 <HAL_RCC_OscConfig+0x32a>
 80018aa:	4b71      	ldr	r3, [pc, #452]	; (8001a70 <HAL_RCC_OscConfig+0x4d8>)
 80018ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ae:	4a70      	ldr	r2, [pc, #448]	; (8001a70 <HAL_RCC_OscConfig+0x4d8>)
 80018b0:	f023 0301 	bic.w	r3, r3, #1
 80018b4:	6713      	str	r3, [r2, #112]	; 0x70
 80018b6:	4b6e      	ldr	r3, [pc, #440]	; (8001a70 <HAL_RCC_OscConfig+0x4d8>)
 80018b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ba:	4a6d      	ldr	r2, [pc, #436]	; (8001a70 <HAL_RCC_OscConfig+0x4d8>)
 80018bc:	f023 0304 	bic.w	r3, r3, #4
 80018c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d015      	beq.n	80018f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ca:	f7ff fb93 	bl	8000ff4 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d0:	e00a      	b.n	80018e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d2:	f7ff fb8f 	bl	8000ff4 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e0bc      	b.n	8001a62 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e8:	4b61      	ldr	r3, [pc, #388]	; (8001a70 <HAL_RCC_OscConfig+0x4d8>)
 80018ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0ee      	beq.n	80018d2 <HAL_RCC_OscConfig+0x33a>
 80018f4:	e014      	b.n	8001920 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f6:	f7ff fb7d 	bl	8000ff4 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fc:	e00a      	b.n	8001914 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fe:	f7ff fb79 	bl	8000ff4 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	f241 3288 	movw	r2, #5000	; 0x1388
 800190c:	4293      	cmp	r3, r2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e0a6      	b.n	8001a62 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001914:	4b56      	ldr	r3, [pc, #344]	; (8001a70 <HAL_RCC_OscConfig+0x4d8>)
 8001916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1ee      	bne.n	80018fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001920:	7dfb      	ldrb	r3, [r7, #23]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d105      	bne.n	8001932 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001926:	4b52      	ldr	r3, [pc, #328]	; (8001a70 <HAL_RCC_OscConfig+0x4d8>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	4a51      	ldr	r2, [pc, #324]	; (8001a70 <HAL_RCC_OscConfig+0x4d8>)
 800192c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001930:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 8092 	beq.w	8001a60 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800193c:	4b4c      	ldr	r3, [pc, #304]	; (8001a70 <HAL_RCC_OscConfig+0x4d8>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 030c 	and.w	r3, r3, #12
 8001944:	2b08      	cmp	r3, #8
 8001946:	d05c      	beq.n	8001a02 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d141      	bne.n	80019d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001950:	4b48      	ldr	r3, [pc, #288]	; (8001a74 <HAL_RCC_OscConfig+0x4dc>)
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001956:	f7ff fb4d 	bl	8000ff4 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195e:	f7ff fb49 	bl	8000ff4 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e078      	b.n	8001a62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001970:	4b3f      	ldr	r3, [pc, #252]	; (8001a70 <HAL_RCC_OscConfig+0x4d8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f0      	bne.n	800195e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69da      	ldr	r2, [r3, #28]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	019b      	lsls	r3, r3, #6
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	085b      	lsrs	r3, r3, #1
 8001994:	3b01      	subs	r3, #1
 8001996:	041b      	lsls	r3, r3, #16
 8001998:	431a      	orrs	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	061b      	lsls	r3, r3, #24
 80019a0:	4933      	ldr	r1, [pc, #204]	; (8001a70 <HAL_RCC_OscConfig+0x4d8>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019a6:	4b33      	ldr	r3, [pc, #204]	; (8001a74 <HAL_RCC_OscConfig+0x4dc>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7ff fb22 	bl	8000ff4 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff fb1e 	bl	8000ff4 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e04d      	b.n	8001a62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c6:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <HAL_RCC_OscConfig+0x4d8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0x41c>
 80019d2:	e045      	b.n	8001a60 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <HAL_RCC_OscConfig+0x4dc>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019da:	f7ff fb0b 	bl	8000ff4 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e2:	f7ff fb07 	bl	8000ff4 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e036      	b.n	8001a62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f4:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <HAL_RCC_OscConfig+0x4d8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1f0      	bne.n	80019e2 <HAL_RCC_OscConfig+0x44a>
 8001a00:	e02e      	b.n	8001a60 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d101      	bne.n	8001a0e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e029      	b.n	8001a62 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <HAL_RCC_OscConfig+0x4d8>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d11c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d115      	bne.n	8001a5c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a36:	4013      	ands	r3, r2
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d10d      	bne.n	8001a5c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d106      	bne.n	8001a5c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e000      	b.n	8001a62 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40007000 	.word	0x40007000
 8001a70:	40023800 	.word	0x40023800
 8001a74:	42470060 	.word	0x42470060

08001a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0cc      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a8c:	4b68      	ldr	r3, [pc, #416]	; (8001c30 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d90c      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	4b65      	ldr	r3, [pc, #404]	; (8001c30 <HAL_RCC_ClockConfig+0x1b8>)
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa2:	4b63      	ldr	r3, [pc, #396]	; (8001c30 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0b8      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d020      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001acc:	4b59      	ldr	r3, [pc, #356]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	4a58      	ldr	r2, [pc, #352]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ad6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ae4:	4b53      	ldr	r3, [pc, #332]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	4a52      	ldr	r2, [pc, #328]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af0:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	494d      	ldr	r1, [pc, #308]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d044      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d107      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b16:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d119      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e07f      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d003      	beq.n	8001b36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d107      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b36:	4b3f      	ldr	r3, [pc, #252]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d109      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e06f      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b46:	4b3b      	ldr	r3, [pc, #236]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e067      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b56:	4b37      	ldr	r3, [pc, #220]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f023 0203 	bic.w	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4934      	ldr	r1, [pc, #208]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b68:	f7ff fa44 	bl	8000ff4 <HAL_GetTick>
 8001b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b70:	f7ff fa40 	bl	8000ff4 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e04f      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b86:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 020c 	and.w	r2, r3, #12
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d1eb      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b98:	4b25      	ldr	r3, [pc, #148]	; (8001c30 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 030f 	and.w	r3, r3, #15
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d20c      	bcs.n	8001bc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba6:	4b22      	ldr	r3, [pc, #136]	; (8001c30 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bae:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d001      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e032      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bcc:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	4916      	ldr	r1, [pc, #88]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d009      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bea:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	490e      	ldr	r1, [pc, #56]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bfe:	f000 f821 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8001c02:	4601      	mov	r1, r0
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <HAL_RCC_ClockConfig+0x1c0>)
 8001c10:	5cd3      	ldrb	r3, [r2, r3]
 8001c12:	fa21 f303 	lsr.w	r3, r1, r3
 8001c16:	4a09      	ldr	r2, [pc, #36]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_RCC_ClockConfig+0x1c8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff f9a4 	bl	8000f6c <HAL_InitTick>

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023c00 	.word	0x40023c00
 8001c34:	40023800 	.word	0x40023800
 8001c38:	08003384 	.word	0x08003384
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000004 	.word	0x20000004

08001c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	2300      	movs	r3, #0
 8001c54:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c5a:	4b63      	ldr	r3, [pc, #396]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d007      	beq.n	8001c76 <HAL_RCC_GetSysClockFreq+0x32>
 8001c66:	2b08      	cmp	r3, #8
 8001c68:	d008      	beq.n	8001c7c <HAL_RCC_GetSysClockFreq+0x38>
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f040 80b4 	bne.w	8001dd8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c70:	4b5e      	ldr	r3, [pc, #376]	; (8001dec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c72:	60bb      	str	r3, [r7, #8]
       break;
 8001c74:	e0b3      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c76:	4b5e      	ldr	r3, [pc, #376]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001c78:	60bb      	str	r3, [r7, #8]
      break;
 8001c7a:	e0b0      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c7c:	4b5a      	ldr	r3, [pc, #360]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c84:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c86:	4b58      	ldr	r3, [pc, #352]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d04a      	beq.n	8001d28 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c92:	4b55      	ldr	r3, [pc, #340]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	099b      	lsrs	r3, r3, #6
 8001c98:	f04f 0400 	mov.w	r4, #0
 8001c9c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	ea03 0501 	and.w	r5, r3, r1
 8001ca8:	ea04 0602 	and.w	r6, r4, r2
 8001cac:	4629      	mov	r1, r5
 8001cae:	4632      	mov	r2, r6
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	f04f 0400 	mov.w	r4, #0
 8001cb8:	0154      	lsls	r4, r2, #5
 8001cba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cbe:	014b      	lsls	r3, r1, #5
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4622      	mov	r2, r4
 8001cc4:	1b49      	subs	r1, r1, r5
 8001cc6:	eb62 0206 	sbc.w	r2, r2, r6
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	f04f 0400 	mov.w	r4, #0
 8001cd2:	0194      	lsls	r4, r2, #6
 8001cd4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cd8:	018b      	lsls	r3, r1, #6
 8001cda:	1a5b      	subs	r3, r3, r1
 8001cdc:	eb64 0402 	sbc.w	r4, r4, r2
 8001ce0:	f04f 0100 	mov.w	r1, #0
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	00e2      	lsls	r2, r4, #3
 8001cea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001cee:	00d9      	lsls	r1, r3, #3
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4614      	mov	r4, r2
 8001cf4:	195b      	adds	r3, r3, r5
 8001cf6:	eb44 0406 	adc.w	r4, r4, r6
 8001cfa:	f04f 0100 	mov.w	r1, #0
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	0262      	lsls	r2, r4, #9
 8001d04:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001d08:	0259      	lsls	r1, r3, #9
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4614      	mov	r4, r2
 8001d0e:	4618      	mov	r0, r3
 8001d10:	4621      	mov	r1, r4
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f04f 0400 	mov.w	r4, #0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4623      	mov	r3, r4
 8001d1c:	f7fe fa5c 	bl	80001d8 <__aeabi_uldivmod>
 8001d20:	4603      	mov	r3, r0
 8001d22:	460c      	mov	r4, r1
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	e049      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d28:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	099b      	lsrs	r3, r3, #6
 8001d2e:	f04f 0400 	mov.w	r4, #0
 8001d32:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	ea03 0501 	and.w	r5, r3, r1
 8001d3e:	ea04 0602 	and.w	r6, r4, r2
 8001d42:	4629      	mov	r1, r5
 8001d44:	4632      	mov	r2, r6
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	f04f 0400 	mov.w	r4, #0
 8001d4e:	0154      	lsls	r4, r2, #5
 8001d50:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d54:	014b      	lsls	r3, r1, #5
 8001d56:	4619      	mov	r1, r3
 8001d58:	4622      	mov	r2, r4
 8001d5a:	1b49      	subs	r1, r1, r5
 8001d5c:	eb62 0206 	sbc.w	r2, r2, r6
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	f04f 0400 	mov.w	r4, #0
 8001d68:	0194      	lsls	r4, r2, #6
 8001d6a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d6e:	018b      	lsls	r3, r1, #6
 8001d70:	1a5b      	subs	r3, r3, r1
 8001d72:	eb64 0402 	sbc.w	r4, r4, r2
 8001d76:	f04f 0100 	mov.w	r1, #0
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	00e2      	lsls	r2, r4, #3
 8001d80:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d84:	00d9      	lsls	r1, r3, #3
 8001d86:	460b      	mov	r3, r1
 8001d88:	4614      	mov	r4, r2
 8001d8a:	195b      	adds	r3, r3, r5
 8001d8c:	eb44 0406 	adc.w	r4, r4, r6
 8001d90:	f04f 0100 	mov.w	r1, #0
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	02a2      	lsls	r2, r4, #10
 8001d9a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d9e:	0299      	lsls	r1, r3, #10
 8001da0:	460b      	mov	r3, r1
 8001da2:	4614      	mov	r4, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	4621      	mov	r1, r4
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f04f 0400 	mov.w	r4, #0
 8001dae:	461a      	mov	r2, r3
 8001db0:	4623      	mov	r3, r4
 8001db2:	f7fe fa11 	bl	80001d8 <__aeabi_uldivmod>
 8001db6:	4603      	mov	r3, r0
 8001db8:	460c      	mov	r4, r1
 8001dba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	0c1b      	lsrs	r3, r3, #16
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd4:	60bb      	str	r3, [r7, #8]
      break;
 8001dd6:	e002      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001dda:	60bb      	str	r3, [r7, #8]
      break;
 8001ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dde:	68bb      	ldr	r3, [r7, #8]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001de8:	40023800 	.word	0x40023800
 8001dec:	00f42400 	.word	0x00f42400
 8001df0:	007a1200 	.word	0x007a1200

08001df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000000 	.word	0x20000000

08001e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e10:	f7ff fff0 	bl	8001df4 <HAL_RCC_GetHCLKFreq>
 8001e14:	4601      	mov	r1, r0
 8001e16:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	0a9b      	lsrs	r3, r3, #10
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	4a03      	ldr	r2, [pc, #12]	; (8001e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e22:	5cd3      	ldrb	r3, [r2, r3]
 8001e24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	08003394 	.word	0x08003394

08001e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e38:	f7ff ffdc 	bl	8001df4 <HAL_RCC_GetHCLKFreq>
 8001e3c:	4601      	mov	r1, r0
 8001e3e:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	0b5b      	lsrs	r3, r3, #13
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	4a03      	ldr	r2, [pc, #12]	; (8001e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e4a:	5cd3      	ldrb	r3, [r2, r3]
 8001e4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40023800 	.word	0x40023800
 8001e58:	08003394 	.word	0x08003394

08001e5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e01d      	b.n	8001eaa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d106      	bne.n	8001e88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7fe fefa 	bl	8000c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3304      	adds	r3, #4
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	f000 faf6 	bl	800248c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e01d      	b.n	8001f00 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d106      	bne.n	8001ede <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f815 	bl	8001f08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3304      	adds	r3, #4
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	f000 facb 	bl	800248c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d122      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d11b      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0202 	mvn.w	r2, #2
 8001f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 fa75 	bl	800244e <HAL_TIM_IC_CaptureCallback>
 8001f64:	e005      	b.n	8001f72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 fa67 	bl	800243a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 fa78 	bl	8002462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d122      	bne.n	8001fcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d11b      	bne.n	8001fcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0204 	mvn.w	r2, #4
 8001f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fa4b 	bl	800244e <HAL_TIM_IC_CaptureCallback>
 8001fb8:	e005      	b.n	8001fc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 fa3d 	bl	800243a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 fa4e 	bl	8002462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d122      	bne.n	8002020 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d11b      	bne.n	8002020 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0208 	mvn.w	r2, #8
 8001ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 fa21 	bl	800244e <HAL_TIM_IC_CaptureCallback>
 800200c:	e005      	b.n	800201a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 fa13 	bl	800243a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 fa24 	bl	8002462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b10      	cmp	r3, #16
 800202c:	d122      	bne.n	8002074 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	2b10      	cmp	r3, #16
 800203a:	d11b      	bne.n	8002074 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f06f 0210 	mvn.w	r2, #16
 8002044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2208      	movs	r2, #8
 800204a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f9f7 	bl	800244e <HAL_TIM_IC_CaptureCallback>
 8002060:	e005      	b.n	800206e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f9e9 	bl	800243a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f9fa 	bl	8002462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b01      	cmp	r3, #1
 8002080:	d10e      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b01      	cmp	r3, #1
 800208e:	d107      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0201 	mvn.w	r2, #1
 8002098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f9c3 	bl	8002426 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020aa:	2b80      	cmp	r3, #128	; 0x80
 80020ac:	d10e      	bne.n	80020cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b8:	2b80      	cmp	r3, #128	; 0x80
 80020ba:	d107      	bne.n	80020cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 fd50 	bl	8002b6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d6:	2b40      	cmp	r3, #64	; 0x40
 80020d8:	d10e      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e4:	2b40      	cmp	r3, #64	; 0x40
 80020e6:	d107      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f9bf 	bl	8002476 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 0320 	and.w	r3, r3, #32
 8002102:	2b20      	cmp	r3, #32
 8002104:	d10e      	bne.n	8002124 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0320 	and.w	r3, r3, #32
 8002110:	2b20      	cmp	r3, #32
 8002112:	d107      	bne.n	8002124 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0220 	mvn.w	r2, #32
 800211c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 fd1a 	bl	8002b58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002142:	2302      	movs	r3, #2
 8002144:	e0b4      	b.n	80022b0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2202      	movs	r2, #2
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b0c      	cmp	r3, #12
 800215a:	f200 809f 	bhi.w	800229c <HAL_TIM_PWM_ConfigChannel+0x170>
 800215e:	a201      	add	r2, pc, #4	; (adr r2, 8002164 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002164:	08002199 	.word	0x08002199
 8002168:	0800229d 	.word	0x0800229d
 800216c:	0800229d 	.word	0x0800229d
 8002170:	0800229d 	.word	0x0800229d
 8002174:	080021d9 	.word	0x080021d9
 8002178:	0800229d 	.word	0x0800229d
 800217c:	0800229d 	.word	0x0800229d
 8002180:	0800229d 	.word	0x0800229d
 8002184:	0800221b 	.word	0x0800221b
 8002188:	0800229d 	.word	0x0800229d
 800218c:	0800229d 	.word	0x0800229d
 8002190:	0800229d 	.word	0x0800229d
 8002194:	0800225b 	.word	0x0800225b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f9f4 	bl	800258c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699a      	ldr	r2, [r3, #24]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0208 	orr.w	r2, r2, #8
 80021b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699a      	ldr	r2, [r3, #24]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0204 	bic.w	r2, r2, #4
 80021c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6999      	ldr	r1, [r3, #24]
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	691a      	ldr	r2, [r3, #16]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	619a      	str	r2, [r3, #24]
      break;
 80021d6:	e062      	b.n	800229e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 fa3a 	bl	8002658 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699a      	ldr	r2, [r3, #24]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6999      	ldr	r1, [r3, #24]
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	021a      	lsls	r2, r3, #8
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	619a      	str	r2, [r3, #24]
      break;
 8002218:	e041      	b.n	800229e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68b9      	ldr	r1, [r7, #8]
 8002220:	4618      	mov	r0, r3
 8002222:	f000 fa85 	bl	8002730 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	69da      	ldr	r2, [r3, #28]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f042 0208 	orr.w	r2, r2, #8
 8002234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	69da      	ldr	r2, [r3, #28]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0204 	bic.w	r2, r2, #4
 8002244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	69d9      	ldr	r1, [r3, #28]
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	61da      	str	r2, [r3, #28]
      break;
 8002258:	e021      	b.n	800229e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68b9      	ldr	r1, [r7, #8]
 8002260:	4618      	mov	r0, r3
 8002262:	f000 facf 	bl	8002804 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	69da      	ldr	r2, [r3, #28]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	69da      	ldr	r2, [r3, #28]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	69d9      	ldr	r1, [r3, #28]
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	021a      	lsls	r2, r3, #8
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	61da      	str	r2, [r3, #28]
      break;
 800229a:	e000      	b.n	800229e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800229c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_TIM_ConfigClockSource+0x18>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e0a6      	b.n	800241e <HAL_TIM_ConfigClockSource+0x166>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2202      	movs	r2, #2
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b40      	cmp	r3, #64	; 0x40
 8002306:	d067      	beq.n	80023d8 <HAL_TIM_ConfigClockSource+0x120>
 8002308:	2b40      	cmp	r3, #64	; 0x40
 800230a:	d80b      	bhi.n	8002324 <HAL_TIM_ConfigClockSource+0x6c>
 800230c:	2b10      	cmp	r3, #16
 800230e:	d073      	beq.n	80023f8 <HAL_TIM_ConfigClockSource+0x140>
 8002310:	2b10      	cmp	r3, #16
 8002312:	d802      	bhi.n	800231a <HAL_TIM_ConfigClockSource+0x62>
 8002314:	2b00      	cmp	r3, #0
 8002316:	d06f      	beq.n	80023f8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002318:	e078      	b.n	800240c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800231a:	2b20      	cmp	r3, #32
 800231c:	d06c      	beq.n	80023f8 <HAL_TIM_ConfigClockSource+0x140>
 800231e:	2b30      	cmp	r3, #48	; 0x30
 8002320:	d06a      	beq.n	80023f8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002322:	e073      	b.n	800240c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002324:	2b70      	cmp	r3, #112	; 0x70
 8002326:	d00d      	beq.n	8002344 <HAL_TIM_ConfigClockSource+0x8c>
 8002328:	2b70      	cmp	r3, #112	; 0x70
 800232a:	d804      	bhi.n	8002336 <HAL_TIM_ConfigClockSource+0x7e>
 800232c:	2b50      	cmp	r3, #80	; 0x50
 800232e:	d033      	beq.n	8002398 <HAL_TIM_ConfigClockSource+0xe0>
 8002330:	2b60      	cmp	r3, #96	; 0x60
 8002332:	d041      	beq.n	80023b8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002334:	e06a      	b.n	800240c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800233a:	d066      	beq.n	800240a <HAL_TIM_ConfigClockSource+0x152>
 800233c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002340:	d017      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002342:	e063      	b.n	800240c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6818      	ldr	r0, [r3, #0]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	6899      	ldr	r1, [r3, #8]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f000 fb20 	bl	8002998 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002366:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	609a      	str	r2, [r3, #8]
      break;
 8002370:	e04c      	b.n	800240c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6899      	ldr	r1, [r3, #8]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f000 fb09 	bl	8002998 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002394:	609a      	str	r2, [r3, #8]
      break;
 8002396:	e039      	b.n	800240c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	6859      	ldr	r1, [r3, #4]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	461a      	mov	r2, r3
 80023a6:	f000 fa7d 	bl	80028a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2150      	movs	r1, #80	; 0x50
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 fad6 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 80023b6:	e029      	b.n	800240c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	6859      	ldr	r1, [r3, #4]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	461a      	mov	r2, r3
 80023c6:	f000 fa9c 	bl	8002902 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2160      	movs	r1, #96	; 0x60
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 fac6 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 80023d6:	e019      	b.n	800240c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	6859      	ldr	r1, [r3, #4]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	461a      	mov	r2, r3
 80023e6:	f000 fa5d 	bl	80028a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2140      	movs	r1, #64	; 0x40
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 fab6 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 80023f6:	e009      	b.n	800240c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4619      	mov	r1, r3
 8002402:	4610      	mov	r0, r2
 8002404:	f000 faad 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 8002408:	e000      	b.n	800240c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800240a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a34      	ldr	r2, [pc, #208]	; (8002570 <TIM_Base_SetConfig+0xe4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d00f      	beq.n	80024c4 <TIM_Base_SetConfig+0x38>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024aa:	d00b      	beq.n	80024c4 <TIM_Base_SetConfig+0x38>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a31      	ldr	r2, [pc, #196]	; (8002574 <TIM_Base_SetConfig+0xe8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d007      	beq.n	80024c4 <TIM_Base_SetConfig+0x38>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a30      	ldr	r2, [pc, #192]	; (8002578 <TIM_Base_SetConfig+0xec>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d003      	beq.n	80024c4 <TIM_Base_SetConfig+0x38>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a2f      	ldr	r2, [pc, #188]	; (800257c <TIM_Base_SetConfig+0xf0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d108      	bne.n	80024d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a25      	ldr	r2, [pc, #148]	; (8002570 <TIM_Base_SetConfig+0xe4>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d01b      	beq.n	8002516 <TIM_Base_SetConfig+0x8a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e4:	d017      	beq.n	8002516 <TIM_Base_SetConfig+0x8a>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a22      	ldr	r2, [pc, #136]	; (8002574 <TIM_Base_SetConfig+0xe8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d013      	beq.n	8002516 <TIM_Base_SetConfig+0x8a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a21      	ldr	r2, [pc, #132]	; (8002578 <TIM_Base_SetConfig+0xec>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d00f      	beq.n	8002516 <TIM_Base_SetConfig+0x8a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a20      	ldr	r2, [pc, #128]	; (800257c <TIM_Base_SetConfig+0xf0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00b      	beq.n	8002516 <TIM_Base_SetConfig+0x8a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a1f      	ldr	r2, [pc, #124]	; (8002580 <TIM_Base_SetConfig+0xf4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d007      	beq.n	8002516 <TIM_Base_SetConfig+0x8a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a1e      	ldr	r2, [pc, #120]	; (8002584 <TIM_Base_SetConfig+0xf8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d003      	beq.n	8002516 <TIM_Base_SetConfig+0x8a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a1d      	ldr	r2, [pc, #116]	; (8002588 <TIM_Base_SetConfig+0xfc>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d108      	bne.n	8002528 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800251c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	4313      	orrs	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	4313      	orrs	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a08      	ldr	r2, [pc, #32]	; (8002570 <TIM_Base_SetConfig+0xe4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d103      	bne.n	800255c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	615a      	str	r2, [r3, #20]
}
 8002562:	bf00      	nop
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40010000 	.word	0x40010000
 8002574:	40000400 	.word	0x40000400
 8002578:	40000800 	.word	0x40000800
 800257c:	40000c00 	.word	0x40000c00
 8002580:	40014000 	.word	0x40014000
 8002584:	40014400 	.word	0x40014400
 8002588:	40014800 	.word	0x40014800

0800258c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	f023 0201 	bic.w	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f023 0303 	bic.w	r3, r3, #3
 80025c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f023 0302 	bic.w	r3, r3, #2
 80025d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	4313      	orrs	r3, r2
 80025de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a1c      	ldr	r2, [pc, #112]	; (8002654 <TIM_OC1_SetConfig+0xc8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d10c      	bne.n	8002602 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f023 0308 	bic.w	r3, r3, #8
 80025ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f023 0304 	bic.w	r3, r3, #4
 8002600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a13      	ldr	r2, [pc, #76]	; (8002654 <TIM_OC1_SetConfig+0xc8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d111      	bne.n	800262e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	621a      	str	r2, [r3, #32]
}
 8002648:	bf00      	nop
 800264a:	371c      	adds	r7, #28
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	40010000 	.word	0x40010000

08002658 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	f023 0210 	bic.w	r2, r3, #16
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800268e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	021b      	lsls	r3, r3, #8
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f023 0320 	bic.w	r3, r3, #32
 80026a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a1e      	ldr	r2, [pc, #120]	; (800272c <TIM_OC2_SetConfig+0xd4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d10d      	bne.n	80026d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a15      	ldr	r2, [pc, #84]	; (800272c <TIM_OC2_SetConfig+0xd4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d113      	bne.n	8002704 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	621a      	str	r2, [r3, #32]
}
 800271e:	bf00      	nop
 8002720:	371c      	adds	r7, #28
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40010000 	.word	0x40010000

08002730 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800275e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f023 0303 	bic.w	r3, r3, #3
 8002766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	4313      	orrs	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	021b      	lsls	r3, r3, #8
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	4313      	orrs	r3, r2
 8002784:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a1d      	ldr	r2, [pc, #116]	; (8002800 <TIM_OC3_SetConfig+0xd0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d10d      	bne.n	80027aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	4313      	orrs	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a14      	ldr	r2, [pc, #80]	; (8002800 <TIM_OC3_SetConfig+0xd0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d113      	bne.n	80027da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	621a      	str	r2, [r3, #32]
}
 80027f4:	bf00      	nop
 80027f6:	371c      	adds	r7, #28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	40010000 	.word	0x40010000

08002804 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800283a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	021b      	lsls	r3, r3, #8
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4313      	orrs	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800284e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	031b      	lsls	r3, r3, #12
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a10      	ldr	r2, [pc, #64]	; (80028a0 <TIM_OC4_SetConfig+0x9c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d109      	bne.n	8002878 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800286a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	019b      	lsls	r3, r3, #6
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4313      	orrs	r3, r2
 8002876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	621a      	str	r2, [r3, #32]
}
 8002892:	bf00      	nop
 8002894:	371c      	adds	r7, #28
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40010000 	.word	0x40010000

080028a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	f023 0201 	bic.w	r2, r3, #1
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f023 030a 	bic.w	r3, r3, #10
 80028e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	621a      	str	r2, [r3, #32]
}
 80028f6:	bf00      	nop
 80028f8:	371c      	adds	r7, #28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002902:	b480      	push	{r7}
 8002904:	b087      	sub	sp, #28
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	f023 0210 	bic.w	r2, r3, #16
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800292c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	031b      	lsls	r3, r3, #12
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800293e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	621a      	str	r2, [r3, #32]
}
 8002956:	bf00      	nop
 8002958:	371c      	adds	r7, #28
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002962:	b480      	push	{r7}
 8002964:	b085      	sub	sp, #20
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	f043 0307 	orr.w	r3, r3, #7
 8002984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	609a      	str	r2, [r3, #8]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	021a      	lsls	r2, r3, #8
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4313      	orrs	r3, r2
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	609a      	str	r2, [r3, #8]
}
 80029cc:	bf00      	nop
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e050      	b.n	8002a92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a1c      	ldr	r2, [pc, #112]	; (8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d018      	beq.n	8002a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3c:	d013      	beq.n	8002a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a18      	ldr	r2, [pc, #96]	; (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d00e      	beq.n	8002a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a16      	ldr	r2, [pc, #88]	; (8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d009      	beq.n	8002a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a15      	ldr	r2, [pc, #84]	; (8002aac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d004      	beq.n	8002a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a13      	ldr	r2, [pc, #76]	; (8002ab0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d10c      	bne.n	8002a80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40010000 	.word	0x40010000
 8002aa4:	40000400 	.word	0x40000400
 8002aa8:	40000800 	.word	0x40000800
 8002aac:	40000c00 	.word	0x40000c00
 8002ab0:	40014000 	.word	0x40014000

08002ab4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e03d      	b.n	8002b4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e03f      	b.n	8002c12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d106      	bne.n	8002bac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7fe f902 	bl	8000db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2224      	movs	r2, #36	; 0x24
 8002bb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f829 	bl	8002c1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002be8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c20:	b085      	sub	sp, #20
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c5e:	f023 030c 	bic.w	r3, r3, #12
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6812      	ldr	r2, [r2, #0]
 8002c66:	68f9      	ldr	r1, [r7, #12]
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699a      	ldr	r2, [r3, #24]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c8a:	f040 818b 	bne.w	8002fa4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4ac1      	ldr	r2, [pc, #772]	; (8002f98 <UART_SetConfig+0x37c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d005      	beq.n	8002ca4 <UART_SetConfig+0x88>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4abf      	ldr	r2, [pc, #764]	; (8002f9c <UART_SetConfig+0x380>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	f040 80bd 	bne.w	8002e1e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ca4:	f7ff f8c6 	bl	8001e34 <HAL_RCC_GetPCLK2Freq>
 8002ca8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	461d      	mov	r5, r3
 8002cae:	f04f 0600 	mov.w	r6, #0
 8002cb2:	46a8      	mov	r8, r5
 8002cb4:	46b1      	mov	r9, r6
 8002cb6:	eb18 0308 	adds.w	r3, r8, r8
 8002cba:	eb49 0409 	adc.w	r4, r9, r9
 8002cbe:	4698      	mov	r8, r3
 8002cc0:	46a1      	mov	r9, r4
 8002cc2:	eb18 0805 	adds.w	r8, r8, r5
 8002cc6:	eb49 0906 	adc.w	r9, r9, r6
 8002cca:	f04f 0100 	mov.w	r1, #0
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002cd6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002cda:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002cde:	4688      	mov	r8, r1
 8002ce0:	4691      	mov	r9, r2
 8002ce2:	eb18 0005 	adds.w	r0, r8, r5
 8002ce6:	eb49 0106 	adc.w	r1, r9, r6
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	461d      	mov	r5, r3
 8002cf0:	f04f 0600 	mov.w	r6, #0
 8002cf4:	196b      	adds	r3, r5, r5
 8002cf6:	eb46 0406 	adc.w	r4, r6, r6
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4623      	mov	r3, r4
 8002cfe:	f7fd fa6b 	bl	80001d8 <__aeabi_uldivmod>
 8002d02:	4603      	mov	r3, r0
 8002d04:	460c      	mov	r4, r1
 8002d06:	461a      	mov	r2, r3
 8002d08:	4ba5      	ldr	r3, [pc, #660]	; (8002fa0 <UART_SetConfig+0x384>)
 8002d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	461d      	mov	r5, r3
 8002d18:	f04f 0600 	mov.w	r6, #0
 8002d1c:	46a9      	mov	r9, r5
 8002d1e:	46b2      	mov	sl, r6
 8002d20:	eb19 0309 	adds.w	r3, r9, r9
 8002d24:	eb4a 040a 	adc.w	r4, sl, sl
 8002d28:	4699      	mov	r9, r3
 8002d2a:	46a2      	mov	sl, r4
 8002d2c:	eb19 0905 	adds.w	r9, r9, r5
 8002d30:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d34:	f04f 0100 	mov.w	r1, #0
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d48:	4689      	mov	r9, r1
 8002d4a:	4692      	mov	sl, r2
 8002d4c:	eb19 0005 	adds.w	r0, r9, r5
 8002d50:	eb4a 0106 	adc.w	r1, sl, r6
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	461d      	mov	r5, r3
 8002d5a:	f04f 0600 	mov.w	r6, #0
 8002d5e:	196b      	adds	r3, r5, r5
 8002d60:	eb46 0406 	adc.w	r4, r6, r6
 8002d64:	461a      	mov	r2, r3
 8002d66:	4623      	mov	r3, r4
 8002d68:	f7fd fa36 	bl	80001d8 <__aeabi_uldivmod>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	460c      	mov	r4, r1
 8002d70:	461a      	mov	r2, r3
 8002d72:	4b8b      	ldr	r3, [pc, #556]	; (8002fa0 <UART_SetConfig+0x384>)
 8002d74:	fba3 1302 	umull	r1, r3, r3, r2
 8002d78:	095b      	lsrs	r3, r3, #5
 8002d7a:	2164      	movs	r1, #100	; 0x64
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	3332      	adds	r3, #50	; 0x32
 8002d86:	4a86      	ldr	r2, [pc, #536]	; (8002fa0 <UART_SetConfig+0x384>)
 8002d88:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8c:	095b      	lsrs	r3, r3, #5
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d94:	4498      	add	r8, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	461d      	mov	r5, r3
 8002d9a:	f04f 0600 	mov.w	r6, #0
 8002d9e:	46a9      	mov	r9, r5
 8002da0:	46b2      	mov	sl, r6
 8002da2:	eb19 0309 	adds.w	r3, r9, r9
 8002da6:	eb4a 040a 	adc.w	r4, sl, sl
 8002daa:	4699      	mov	r9, r3
 8002dac:	46a2      	mov	sl, r4
 8002dae:	eb19 0905 	adds.w	r9, r9, r5
 8002db2:	eb4a 0a06 	adc.w	sl, sl, r6
 8002db6:	f04f 0100 	mov.w	r1, #0
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dc2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dc6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002dca:	4689      	mov	r9, r1
 8002dcc:	4692      	mov	sl, r2
 8002dce:	eb19 0005 	adds.w	r0, r9, r5
 8002dd2:	eb4a 0106 	adc.w	r1, sl, r6
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	461d      	mov	r5, r3
 8002ddc:	f04f 0600 	mov.w	r6, #0
 8002de0:	196b      	adds	r3, r5, r5
 8002de2:	eb46 0406 	adc.w	r4, r6, r6
 8002de6:	461a      	mov	r2, r3
 8002de8:	4623      	mov	r3, r4
 8002dea:	f7fd f9f5 	bl	80001d8 <__aeabi_uldivmod>
 8002dee:	4603      	mov	r3, r0
 8002df0:	460c      	mov	r4, r1
 8002df2:	461a      	mov	r2, r3
 8002df4:	4b6a      	ldr	r3, [pc, #424]	; (8002fa0 <UART_SetConfig+0x384>)
 8002df6:	fba3 1302 	umull	r1, r3, r3, r2
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	2164      	movs	r1, #100	; 0x64
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	3332      	adds	r3, #50	; 0x32
 8002e08:	4a65      	ldr	r2, [pc, #404]	; (8002fa0 <UART_SetConfig+0x384>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	f003 0207 	and.w	r2, r3, #7
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4442      	add	r2, r8
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	e26f      	b.n	80032fe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e1e:	f7fe fff5 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 8002e22:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	461d      	mov	r5, r3
 8002e28:	f04f 0600 	mov.w	r6, #0
 8002e2c:	46a8      	mov	r8, r5
 8002e2e:	46b1      	mov	r9, r6
 8002e30:	eb18 0308 	adds.w	r3, r8, r8
 8002e34:	eb49 0409 	adc.w	r4, r9, r9
 8002e38:	4698      	mov	r8, r3
 8002e3a:	46a1      	mov	r9, r4
 8002e3c:	eb18 0805 	adds.w	r8, r8, r5
 8002e40:	eb49 0906 	adc.w	r9, r9, r6
 8002e44:	f04f 0100 	mov.w	r1, #0
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e50:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e54:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e58:	4688      	mov	r8, r1
 8002e5a:	4691      	mov	r9, r2
 8002e5c:	eb18 0005 	adds.w	r0, r8, r5
 8002e60:	eb49 0106 	adc.w	r1, r9, r6
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	461d      	mov	r5, r3
 8002e6a:	f04f 0600 	mov.w	r6, #0
 8002e6e:	196b      	adds	r3, r5, r5
 8002e70:	eb46 0406 	adc.w	r4, r6, r6
 8002e74:	461a      	mov	r2, r3
 8002e76:	4623      	mov	r3, r4
 8002e78:	f7fd f9ae 	bl	80001d8 <__aeabi_uldivmod>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	460c      	mov	r4, r1
 8002e80:	461a      	mov	r2, r3
 8002e82:	4b47      	ldr	r3, [pc, #284]	; (8002fa0 <UART_SetConfig+0x384>)
 8002e84:	fba3 2302 	umull	r2, r3, r3, r2
 8002e88:	095b      	lsrs	r3, r3, #5
 8002e8a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	461d      	mov	r5, r3
 8002e92:	f04f 0600 	mov.w	r6, #0
 8002e96:	46a9      	mov	r9, r5
 8002e98:	46b2      	mov	sl, r6
 8002e9a:	eb19 0309 	adds.w	r3, r9, r9
 8002e9e:	eb4a 040a 	adc.w	r4, sl, sl
 8002ea2:	4699      	mov	r9, r3
 8002ea4:	46a2      	mov	sl, r4
 8002ea6:	eb19 0905 	adds.w	r9, r9, r5
 8002eaa:	eb4a 0a06 	adc.w	sl, sl, r6
 8002eae:	f04f 0100 	mov.w	r1, #0
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ebe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ec2:	4689      	mov	r9, r1
 8002ec4:	4692      	mov	sl, r2
 8002ec6:	eb19 0005 	adds.w	r0, r9, r5
 8002eca:	eb4a 0106 	adc.w	r1, sl, r6
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	461d      	mov	r5, r3
 8002ed4:	f04f 0600 	mov.w	r6, #0
 8002ed8:	196b      	adds	r3, r5, r5
 8002eda:	eb46 0406 	adc.w	r4, r6, r6
 8002ede:	461a      	mov	r2, r3
 8002ee0:	4623      	mov	r3, r4
 8002ee2:	f7fd f979 	bl	80001d8 <__aeabi_uldivmod>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	460c      	mov	r4, r1
 8002eea:	461a      	mov	r2, r3
 8002eec:	4b2c      	ldr	r3, [pc, #176]	; (8002fa0 <UART_SetConfig+0x384>)
 8002eee:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	2164      	movs	r1, #100	; 0x64
 8002ef6:	fb01 f303 	mul.w	r3, r1, r3
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	3332      	adds	r3, #50	; 0x32
 8002f00:	4a27      	ldr	r2, [pc, #156]	; (8002fa0 <UART_SetConfig+0x384>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f0e:	4498      	add	r8, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	461d      	mov	r5, r3
 8002f14:	f04f 0600 	mov.w	r6, #0
 8002f18:	46a9      	mov	r9, r5
 8002f1a:	46b2      	mov	sl, r6
 8002f1c:	eb19 0309 	adds.w	r3, r9, r9
 8002f20:	eb4a 040a 	adc.w	r4, sl, sl
 8002f24:	4699      	mov	r9, r3
 8002f26:	46a2      	mov	sl, r4
 8002f28:	eb19 0905 	adds.w	r9, r9, r5
 8002f2c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f30:	f04f 0100 	mov.w	r1, #0
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f44:	4689      	mov	r9, r1
 8002f46:	4692      	mov	sl, r2
 8002f48:	eb19 0005 	adds.w	r0, r9, r5
 8002f4c:	eb4a 0106 	adc.w	r1, sl, r6
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	461d      	mov	r5, r3
 8002f56:	f04f 0600 	mov.w	r6, #0
 8002f5a:	196b      	adds	r3, r5, r5
 8002f5c:	eb46 0406 	adc.w	r4, r6, r6
 8002f60:	461a      	mov	r2, r3
 8002f62:	4623      	mov	r3, r4
 8002f64:	f7fd f938 	bl	80001d8 <__aeabi_uldivmod>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	460c      	mov	r4, r1
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <UART_SetConfig+0x384>)
 8002f70:	fba3 1302 	umull	r1, r3, r3, r2
 8002f74:	095b      	lsrs	r3, r3, #5
 8002f76:	2164      	movs	r1, #100	; 0x64
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	3332      	adds	r3, #50	; 0x32
 8002f82:	4a07      	ldr	r2, [pc, #28]	; (8002fa0 <UART_SetConfig+0x384>)
 8002f84:	fba2 2303 	umull	r2, r3, r2, r3
 8002f88:	095b      	lsrs	r3, r3, #5
 8002f8a:	f003 0207 	and.w	r2, r3, #7
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4442      	add	r2, r8
 8002f94:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002f96:	e1b2      	b.n	80032fe <UART_SetConfig+0x6e2>
 8002f98:	40011000 	.word	0x40011000
 8002f9c:	40011400 	.word	0x40011400
 8002fa0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4ad7      	ldr	r2, [pc, #860]	; (8003308 <UART_SetConfig+0x6ec>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d005      	beq.n	8002fba <UART_SetConfig+0x39e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4ad6      	ldr	r2, [pc, #856]	; (800330c <UART_SetConfig+0x6f0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	f040 80d1 	bne.w	800315c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fba:	f7fe ff3b 	bl	8001e34 <HAL_RCC_GetPCLK2Freq>
 8002fbe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	469a      	mov	sl, r3
 8002fc4:	f04f 0b00 	mov.w	fp, #0
 8002fc8:	46d0      	mov	r8, sl
 8002fca:	46d9      	mov	r9, fp
 8002fcc:	eb18 0308 	adds.w	r3, r8, r8
 8002fd0:	eb49 0409 	adc.w	r4, r9, r9
 8002fd4:	4698      	mov	r8, r3
 8002fd6:	46a1      	mov	r9, r4
 8002fd8:	eb18 080a 	adds.w	r8, r8, sl
 8002fdc:	eb49 090b 	adc.w	r9, r9, fp
 8002fe0:	f04f 0100 	mov.w	r1, #0
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002fec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ff0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ff4:	4688      	mov	r8, r1
 8002ff6:	4691      	mov	r9, r2
 8002ff8:	eb1a 0508 	adds.w	r5, sl, r8
 8002ffc:	eb4b 0609 	adc.w	r6, fp, r9
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	4619      	mov	r1, r3
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	f04f 0300 	mov.w	r3, #0
 800300e:	f04f 0400 	mov.w	r4, #0
 8003012:	0094      	lsls	r4, r2, #2
 8003014:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003018:	008b      	lsls	r3, r1, #2
 800301a:	461a      	mov	r2, r3
 800301c:	4623      	mov	r3, r4
 800301e:	4628      	mov	r0, r5
 8003020:	4631      	mov	r1, r6
 8003022:	f7fd f8d9 	bl	80001d8 <__aeabi_uldivmod>
 8003026:	4603      	mov	r3, r0
 8003028:	460c      	mov	r4, r1
 800302a:	461a      	mov	r2, r3
 800302c:	4bb8      	ldr	r3, [pc, #736]	; (8003310 <UART_SetConfig+0x6f4>)
 800302e:	fba3 2302 	umull	r2, r3, r3, r2
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	469b      	mov	fp, r3
 800303c:	f04f 0c00 	mov.w	ip, #0
 8003040:	46d9      	mov	r9, fp
 8003042:	46e2      	mov	sl, ip
 8003044:	eb19 0309 	adds.w	r3, r9, r9
 8003048:	eb4a 040a 	adc.w	r4, sl, sl
 800304c:	4699      	mov	r9, r3
 800304e:	46a2      	mov	sl, r4
 8003050:	eb19 090b 	adds.w	r9, r9, fp
 8003054:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003058:	f04f 0100 	mov.w	r1, #0
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003064:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003068:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800306c:	4689      	mov	r9, r1
 800306e:	4692      	mov	sl, r2
 8003070:	eb1b 0509 	adds.w	r5, fp, r9
 8003074:	eb4c 060a 	adc.w	r6, ip, sl
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	4619      	mov	r1, r3
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	f04f 0400 	mov.w	r4, #0
 800308a:	0094      	lsls	r4, r2, #2
 800308c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003090:	008b      	lsls	r3, r1, #2
 8003092:	461a      	mov	r2, r3
 8003094:	4623      	mov	r3, r4
 8003096:	4628      	mov	r0, r5
 8003098:	4631      	mov	r1, r6
 800309a:	f7fd f89d 	bl	80001d8 <__aeabi_uldivmod>
 800309e:	4603      	mov	r3, r0
 80030a0:	460c      	mov	r4, r1
 80030a2:	461a      	mov	r2, r3
 80030a4:	4b9a      	ldr	r3, [pc, #616]	; (8003310 <UART_SetConfig+0x6f4>)
 80030a6:	fba3 1302 	umull	r1, r3, r3, r2
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	2164      	movs	r1, #100	; 0x64
 80030ae:	fb01 f303 	mul.w	r3, r1, r3
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	3332      	adds	r3, #50	; 0x32
 80030b8:	4a95      	ldr	r2, [pc, #596]	; (8003310 <UART_SetConfig+0x6f4>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030c4:	4498      	add	r8, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	469b      	mov	fp, r3
 80030ca:	f04f 0c00 	mov.w	ip, #0
 80030ce:	46d9      	mov	r9, fp
 80030d0:	46e2      	mov	sl, ip
 80030d2:	eb19 0309 	adds.w	r3, r9, r9
 80030d6:	eb4a 040a 	adc.w	r4, sl, sl
 80030da:	4699      	mov	r9, r3
 80030dc:	46a2      	mov	sl, r4
 80030de:	eb19 090b 	adds.w	r9, r9, fp
 80030e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80030e6:	f04f 0100 	mov.w	r1, #0
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030fa:	4689      	mov	r9, r1
 80030fc:	4692      	mov	sl, r2
 80030fe:	eb1b 0509 	adds.w	r5, fp, r9
 8003102:	eb4c 060a 	adc.w	r6, ip, sl
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4619      	mov	r1, r3
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	f04f 0400 	mov.w	r4, #0
 8003118:	0094      	lsls	r4, r2, #2
 800311a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800311e:	008b      	lsls	r3, r1, #2
 8003120:	461a      	mov	r2, r3
 8003122:	4623      	mov	r3, r4
 8003124:	4628      	mov	r0, r5
 8003126:	4631      	mov	r1, r6
 8003128:	f7fd f856 	bl	80001d8 <__aeabi_uldivmod>
 800312c:	4603      	mov	r3, r0
 800312e:	460c      	mov	r4, r1
 8003130:	461a      	mov	r2, r3
 8003132:	4b77      	ldr	r3, [pc, #476]	; (8003310 <UART_SetConfig+0x6f4>)
 8003134:	fba3 1302 	umull	r1, r3, r3, r2
 8003138:	095b      	lsrs	r3, r3, #5
 800313a:	2164      	movs	r1, #100	; 0x64
 800313c:	fb01 f303 	mul.w	r3, r1, r3
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	3332      	adds	r3, #50	; 0x32
 8003146:	4a72      	ldr	r2, [pc, #456]	; (8003310 <UART_SetConfig+0x6f4>)
 8003148:	fba2 2303 	umull	r2, r3, r2, r3
 800314c:	095b      	lsrs	r3, r3, #5
 800314e:	f003 020f 	and.w	r2, r3, #15
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4442      	add	r2, r8
 8003158:	609a      	str	r2, [r3, #8]
 800315a:	e0d0      	b.n	80032fe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800315c:	f7fe fe56 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 8003160:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	469a      	mov	sl, r3
 8003166:	f04f 0b00 	mov.w	fp, #0
 800316a:	46d0      	mov	r8, sl
 800316c:	46d9      	mov	r9, fp
 800316e:	eb18 0308 	adds.w	r3, r8, r8
 8003172:	eb49 0409 	adc.w	r4, r9, r9
 8003176:	4698      	mov	r8, r3
 8003178:	46a1      	mov	r9, r4
 800317a:	eb18 080a 	adds.w	r8, r8, sl
 800317e:	eb49 090b 	adc.w	r9, r9, fp
 8003182:	f04f 0100 	mov.w	r1, #0
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800318e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003192:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003196:	4688      	mov	r8, r1
 8003198:	4691      	mov	r9, r2
 800319a:	eb1a 0508 	adds.w	r5, sl, r8
 800319e:	eb4b 0609 	adc.w	r6, fp, r9
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4619      	mov	r1, r3
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	f04f 0400 	mov.w	r4, #0
 80031b4:	0094      	lsls	r4, r2, #2
 80031b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031ba:	008b      	lsls	r3, r1, #2
 80031bc:	461a      	mov	r2, r3
 80031be:	4623      	mov	r3, r4
 80031c0:	4628      	mov	r0, r5
 80031c2:	4631      	mov	r1, r6
 80031c4:	f7fd f808 	bl	80001d8 <__aeabi_uldivmod>
 80031c8:	4603      	mov	r3, r0
 80031ca:	460c      	mov	r4, r1
 80031cc:	461a      	mov	r2, r3
 80031ce:	4b50      	ldr	r3, [pc, #320]	; (8003310 <UART_SetConfig+0x6f4>)
 80031d0:	fba3 2302 	umull	r2, r3, r3, r2
 80031d4:	095b      	lsrs	r3, r3, #5
 80031d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	469b      	mov	fp, r3
 80031de:	f04f 0c00 	mov.w	ip, #0
 80031e2:	46d9      	mov	r9, fp
 80031e4:	46e2      	mov	sl, ip
 80031e6:	eb19 0309 	adds.w	r3, r9, r9
 80031ea:	eb4a 040a 	adc.w	r4, sl, sl
 80031ee:	4699      	mov	r9, r3
 80031f0:	46a2      	mov	sl, r4
 80031f2:	eb19 090b 	adds.w	r9, r9, fp
 80031f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031fa:	f04f 0100 	mov.w	r1, #0
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003206:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800320a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800320e:	4689      	mov	r9, r1
 8003210:	4692      	mov	sl, r2
 8003212:	eb1b 0509 	adds.w	r5, fp, r9
 8003216:	eb4c 060a 	adc.w	r6, ip, sl
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	4619      	mov	r1, r3
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	f04f 0400 	mov.w	r4, #0
 800322c:	0094      	lsls	r4, r2, #2
 800322e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003232:	008b      	lsls	r3, r1, #2
 8003234:	461a      	mov	r2, r3
 8003236:	4623      	mov	r3, r4
 8003238:	4628      	mov	r0, r5
 800323a:	4631      	mov	r1, r6
 800323c:	f7fc ffcc 	bl	80001d8 <__aeabi_uldivmod>
 8003240:	4603      	mov	r3, r0
 8003242:	460c      	mov	r4, r1
 8003244:	461a      	mov	r2, r3
 8003246:	4b32      	ldr	r3, [pc, #200]	; (8003310 <UART_SetConfig+0x6f4>)
 8003248:	fba3 1302 	umull	r1, r3, r3, r2
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	2164      	movs	r1, #100	; 0x64
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	3332      	adds	r3, #50	; 0x32
 800325a:	4a2d      	ldr	r2, [pc, #180]	; (8003310 <UART_SetConfig+0x6f4>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003266:	4498      	add	r8, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	469b      	mov	fp, r3
 800326c:	f04f 0c00 	mov.w	ip, #0
 8003270:	46d9      	mov	r9, fp
 8003272:	46e2      	mov	sl, ip
 8003274:	eb19 0309 	adds.w	r3, r9, r9
 8003278:	eb4a 040a 	adc.w	r4, sl, sl
 800327c:	4699      	mov	r9, r3
 800327e:	46a2      	mov	sl, r4
 8003280:	eb19 090b 	adds.w	r9, r9, fp
 8003284:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003288:	f04f 0100 	mov.w	r1, #0
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003294:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003298:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800329c:	4689      	mov	r9, r1
 800329e:	4692      	mov	sl, r2
 80032a0:	eb1b 0509 	adds.w	r5, fp, r9
 80032a4:	eb4c 060a 	adc.w	r6, ip, sl
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	4619      	mov	r1, r3
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	f04f 0400 	mov.w	r4, #0
 80032ba:	0094      	lsls	r4, r2, #2
 80032bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032c0:	008b      	lsls	r3, r1, #2
 80032c2:	461a      	mov	r2, r3
 80032c4:	4623      	mov	r3, r4
 80032c6:	4628      	mov	r0, r5
 80032c8:	4631      	mov	r1, r6
 80032ca:	f7fc ff85 	bl	80001d8 <__aeabi_uldivmod>
 80032ce:	4603      	mov	r3, r0
 80032d0:	460c      	mov	r4, r1
 80032d2:	461a      	mov	r2, r3
 80032d4:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <UART_SetConfig+0x6f4>)
 80032d6:	fba3 1302 	umull	r1, r3, r3, r2
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	2164      	movs	r1, #100	; 0x64
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	3332      	adds	r3, #50	; 0x32
 80032e8:	4a09      	ldr	r2, [pc, #36]	; (8003310 <UART_SetConfig+0x6f4>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	f003 020f 	and.w	r2, r3, #15
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4442      	add	r2, r8
 80032fa:	609a      	str	r2, [r3, #8]
}
 80032fc:	e7ff      	b.n	80032fe <UART_SetConfig+0x6e2>
 80032fe:	bf00      	nop
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003308:	40011000 	.word	0x40011000
 800330c:	40011400 	.word	0x40011400
 8003310:	51eb851f 	.word	0x51eb851f

08003314 <__libc_init_array>:
 8003314:	b570      	push	{r4, r5, r6, lr}
 8003316:	4e0d      	ldr	r6, [pc, #52]	; (800334c <__libc_init_array+0x38>)
 8003318:	4c0d      	ldr	r4, [pc, #52]	; (8003350 <__libc_init_array+0x3c>)
 800331a:	1ba4      	subs	r4, r4, r6
 800331c:	10a4      	asrs	r4, r4, #2
 800331e:	2500      	movs	r5, #0
 8003320:	42a5      	cmp	r5, r4
 8003322:	d109      	bne.n	8003338 <__libc_init_array+0x24>
 8003324:	4e0b      	ldr	r6, [pc, #44]	; (8003354 <__libc_init_array+0x40>)
 8003326:	4c0c      	ldr	r4, [pc, #48]	; (8003358 <__libc_init_array+0x44>)
 8003328:	f000 f820 	bl	800336c <_init>
 800332c:	1ba4      	subs	r4, r4, r6
 800332e:	10a4      	asrs	r4, r4, #2
 8003330:	2500      	movs	r5, #0
 8003332:	42a5      	cmp	r5, r4
 8003334:	d105      	bne.n	8003342 <__libc_init_array+0x2e>
 8003336:	bd70      	pop	{r4, r5, r6, pc}
 8003338:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800333c:	4798      	blx	r3
 800333e:	3501      	adds	r5, #1
 8003340:	e7ee      	b.n	8003320 <__libc_init_array+0xc>
 8003342:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003346:	4798      	blx	r3
 8003348:	3501      	adds	r5, #1
 800334a:	e7f2      	b.n	8003332 <__libc_init_array+0x1e>
 800334c:	080033a4 	.word	0x080033a4
 8003350:	080033a4 	.word	0x080033a4
 8003354:	080033a4 	.word	0x080033a4
 8003358:	080033a8 	.word	0x080033a8

0800335c <memset>:
 800335c:	4402      	add	r2, r0
 800335e:	4603      	mov	r3, r0
 8003360:	4293      	cmp	r3, r2
 8003362:	d100      	bne.n	8003366 <memset+0xa>
 8003364:	4770      	bx	lr
 8003366:	f803 1b01 	strb.w	r1, [r3], #1
 800336a:	e7f9      	b.n	8003360 <memset+0x4>

0800336c <_init>:
 800336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336e:	bf00      	nop
 8003370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003372:	bc08      	pop	{r3}
 8003374:	469e      	mov	lr, r3
 8003376:	4770      	bx	lr

08003378 <_fini>:
 8003378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337a:	bf00      	nop
 800337c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337e:	bc08      	pop	{r3}
 8003380:	469e      	mov	lr, r3
 8003382:	4770      	bx	lr
